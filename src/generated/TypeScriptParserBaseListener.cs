//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.9.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from TypeScriptParser.g4 by ANTLR 4.9.1

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419


using Antlr4.Runtime.Misc;
using IErrorNode = Antlr4.Runtime.Tree.IErrorNode;
using ITerminalNode = Antlr4.Runtime.Tree.ITerminalNode;
using IToken = Antlr4.Runtime.IToken;
using ParserRuleContext = Antlr4.Runtime.ParserRuleContext;

/// <summary>
/// This class provides an empty implementation of <see cref="ITypeScriptParserListener"/>,
/// which can be extended to create a listener which only needs to handle a subset
/// of the available methods.
/// </summary>
[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.9.1")]
[System.Diagnostics.DebuggerNonUserCode]
[System.CLSCompliant(false)]
public partial class TypeScriptParserBaseListener : ITypeScriptParserListener {
	/// <summary>
	/// Enter a parse tree produced by <see cref="TypeScriptParser.initializer"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterInitializer([NotNull] TypeScriptParser.InitializerContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="TypeScriptParser.initializer"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitInitializer([NotNull] TypeScriptParser.InitializerContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="TypeScriptParser.bindingPattern"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterBindingPattern([NotNull] TypeScriptParser.BindingPatternContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="TypeScriptParser.bindingPattern"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitBindingPattern([NotNull] TypeScriptParser.BindingPatternContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="TypeScriptParser.typeParameters"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterTypeParameters([NotNull] TypeScriptParser.TypeParametersContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="TypeScriptParser.typeParameters"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitTypeParameters([NotNull] TypeScriptParser.TypeParametersContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="TypeScriptParser.typeParameterList"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterTypeParameterList([NotNull] TypeScriptParser.TypeParameterListContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="TypeScriptParser.typeParameterList"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitTypeParameterList([NotNull] TypeScriptParser.TypeParameterListContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="TypeScriptParser.typeParameter"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterTypeParameter([NotNull] TypeScriptParser.TypeParameterContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="TypeScriptParser.typeParameter"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitTypeParameter([NotNull] TypeScriptParser.TypeParameterContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="TypeScriptParser.constraint"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterConstraint([NotNull] TypeScriptParser.ConstraintContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="TypeScriptParser.constraint"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitConstraint([NotNull] TypeScriptParser.ConstraintContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="TypeScriptParser.typeArguments"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterTypeArguments([NotNull] TypeScriptParser.TypeArgumentsContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="TypeScriptParser.typeArguments"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitTypeArguments([NotNull] TypeScriptParser.TypeArgumentsContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="TypeScriptParser.typeArgumentList"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterTypeArgumentList([NotNull] TypeScriptParser.TypeArgumentListContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="TypeScriptParser.typeArgumentList"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitTypeArgumentList([NotNull] TypeScriptParser.TypeArgumentListContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="TypeScriptParser.typeArgument"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterTypeArgument([NotNull] TypeScriptParser.TypeArgumentContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="TypeScriptParser.typeArgument"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitTypeArgument([NotNull] TypeScriptParser.TypeArgumentContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="TypeScriptParser.type_"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterType_([NotNull] TypeScriptParser.Type_Context context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="TypeScriptParser.type_"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitType_([NotNull] TypeScriptParser.Type_Context context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>Intersection</c>
	/// labeled alternative in <see cref="TypeScriptParser.unionOrIntersectionOrPrimaryType"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterIntersection([NotNull] TypeScriptParser.IntersectionContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>Intersection</c>
	/// labeled alternative in <see cref="TypeScriptParser.unionOrIntersectionOrPrimaryType"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitIntersection([NotNull] TypeScriptParser.IntersectionContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>Primary</c>
	/// labeled alternative in <see cref="TypeScriptParser.unionOrIntersectionOrPrimaryType"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterPrimary([NotNull] TypeScriptParser.PrimaryContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>Primary</c>
	/// labeled alternative in <see cref="TypeScriptParser.unionOrIntersectionOrPrimaryType"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitPrimary([NotNull] TypeScriptParser.PrimaryContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>Union</c>
	/// labeled alternative in <see cref="TypeScriptParser.unionOrIntersectionOrPrimaryType"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterUnion([NotNull] TypeScriptParser.UnionContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>Union</c>
	/// labeled alternative in <see cref="TypeScriptParser.unionOrIntersectionOrPrimaryType"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitUnion([NotNull] TypeScriptParser.UnionContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>RedefinitionOfType</c>
	/// labeled alternative in <see cref="TypeScriptParser.primaryType"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterRedefinitionOfType([NotNull] TypeScriptParser.RedefinitionOfTypeContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>RedefinitionOfType</c>
	/// labeled alternative in <see cref="TypeScriptParser.primaryType"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitRedefinitionOfType([NotNull] TypeScriptParser.RedefinitionOfTypeContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>PredefinedPrimType</c>
	/// labeled alternative in <see cref="TypeScriptParser.primaryType"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterPredefinedPrimType([NotNull] TypeScriptParser.PredefinedPrimTypeContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>PredefinedPrimType</c>
	/// labeled alternative in <see cref="TypeScriptParser.primaryType"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitPredefinedPrimType([NotNull] TypeScriptParser.PredefinedPrimTypeContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>ArrayPrimType</c>
	/// labeled alternative in <see cref="TypeScriptParser.primaryType"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterArrayPrimType([NotNull] TypeScriptParser.ArrayPrimTypeContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>ArrayPrimType</c>
	/// labeled alternative in <see cref="TypeScriptParser.primaryType"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitArrayPrimType([NotNull] TypeScriptParser.ArrayPrimTypeContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>ParenthesizedPrimType</c>
	/// labeled alternative in <see cref="TypeScriptParser.primaryType"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterParenthesizedPrimType([NotNull] TypeScriptParser.ParenthesizedPrimTypeContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>ParenthesizedPrimType</c>
	/// labeled alternative in <see cref="TypeScriptParser.primaryType"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitParenthesizedPrimType([NotNull] TypeScriptParser.ParenthesizedPrimTypeContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>ThisPrimType</c>
	/// labeled alternative in <see cref="TypeScriptParser.primaryType"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterThisPrimType([NotNull] TypeScriptParser.ThisPrimTypeContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>ThisPrimType</c>
	/// labeled alternative in <see cref="TypeScriptParser.primaryType"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitThisPrimType([NotNull] TypeScriptParser.ThisPrimTypeContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>TuplePrimType</c>
	/// labeled alternative in <see cref="TypeScriptParser.primaryType"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterTuplePrimType([NotNull] TypeScriptParser.TuplePrimTypeContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>TuplePrimType</c>
	/// labeled alternative in <see cref="TypeScriptParser.primaryType"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitTuplePrimType([NotNull] TypeScriptParser.TuplePrimTypeContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>ObjectPrimType</c>
	/// labeled alternative in <see cref="TypeScriptParser.primaryType"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterObjectPrimType([NotNull] TypeScriptParser.ObjectPrimTypeContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>ObjectPrimType</c>
	/// labeled alternative in <see cref="TypeScriptParser.primaryType"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitObjectPrimType([NotNull] TypeScriptParser.ObjectPrimTypeContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>ReferencePrimType</c>
	/// labeled alternative in <see cref="TypeScriptParser.primaryType"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterReferencePrimType([NotNull] TypeScriptParser.ReferencePrimTypeContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>ReferencePrimType</c>
	/// labeled alternative in <see cref="TypeScriptParser.primaryType"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitReferencePrimType([NotNull] TypeScriptParser.ReferencePrimTypeContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>QueryPrimType</c>
	/// labeled alternative in <see cref="TypeScriptParser.primaryType"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterQueryPrimType([NotNull] TypeScriptParser.QueryPrimTypeContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>QueryPrimType</c>
	/// labeled alternative in <see cref="TypeScriptParser.primaryType"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitQueryPrimType([NotNull] TypeScriptParser.QueryPrimTypeContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="TypeScriptParser.predefinedType"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterPredefinedType([NotNull] TypeScriptParser.PredefinedTypeContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="TypeScriptParser.predefinedType"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitPredefinedType([NotNull] TypeScriptParser.PredefinedTypeContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="TypeScriptParser.typeReference"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterTypeReference([NotNull] TypeScriptParser.TypeReferenceContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="TypeScriptParser.typeReference"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitTypeReference([NotNull] TypeScriptParser.TypeReferenceContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="TypeScriptParser.nestedTypeGeneric"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterNestedTypeGeneric([NotNull] TypeScriptParser.NestedTypeGenericContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="TypeScriptParser.nestedTypeGeneric"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitNestedTypeGeneric([NotNull] TypeScriptParser.NestedTypeGenericContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="TypeScriptParser.typeGeneric"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterTypeGeneric([NotNull] TypeScriptParser.TypeGenericContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="TypeScriptParser.typeGeneric"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitTypeGeneric([NotNull] TypeScriptParser.TypeGenericContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="TypeScriptParser.typeIncludeGeneric"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterTypeIncludeGeneric([NotNull] TypeScriptParser.TypeIncludeGenericContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="TypeScriptParser.typeIncludeGeneric"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitTypeIncludeGeneric([NotNull] TypeScriptParser.TypeIncludeGenericContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="TypeScriptParser.typeName"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterTypeName([NotNull] TypeScriptParser.TypeNameContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="TypeScriptParser.typeName"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitTypeName([NotNull] TypeScriptParser.TypeNameContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="TypeScriptParser.objectType"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterObjectType([NotNull] TypeScriptParser.ObjectTypeContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="TypeScriptParser.objectType"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitObjectType([NotNull] TypeScriptParser.ObjectTypeContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="TypeScriptParser.typeBody"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterTypeBody([NotNull] TypeScriptParser.TypeBodyContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="TypeScriptParser.typeBody"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitTypeBody([NotNull] TypeScriptParser.TypeBodyContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="TypeScriptParser.typeMemberList"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterTypeMemberList([NotNull] TypeScriptParser.TypeMemberListContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="TypeScriptParser.typeMemberList"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitTypeMemberList([NotNull] TypeScriptParser.TypeMemberListContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="TypeScriptParser.typeMember"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterTypeMember([NotNull] TypeScriptParser.TypeMemberContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="TypeScriptParser.typeMember"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitTypeMember([NotNull] TypeScriptParser.TypeMemberContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="TypeScriptParser.arrayType"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterArrayType([NotNull] TypeScriptParser.ArrayTypeContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="TypeScriptParser.arrayType"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitArrayType([NotNull] TypeScriptParser.ArrayTypeContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="TypeScriptParser.tupleType"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterTupleType([NotNull] TypeScriptParser.TupleTypeContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="TypeScriptParser.tupleType"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitTupleType([NotNull] TypeScriptParser.TupleTypeContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="TypeScriptParser.tupleElementTypes"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterTupleElementTypes([NotNull] TypeScriptParser.TupleElementTypesContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="TypeScriptParser.tupleElementTypes"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitTupleElementTypes([NotNull] TypeScriptParser.TupleElementTypesContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="TypeScriptParser.functionType"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterFunctionType([NotNull] TypeScriptParser.FunctionTypeContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="TypeScriptParser.functionType"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitFunctionType([NotNull] TypeScriptParser.FunctionTypeContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="TypeScriptParser.constructorType"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterConstructorType([NotNull] TypeScriptParser.ConstructorTypeContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="TypeScriptParser.constructorType"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitConstructorType([NotNull] TypeScriptParser.ConstructorTypeContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="TypeScriptParser.typeQuery"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterTypeQuery([NotNull] TypeScriptParser.TypeQueryContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="TypeScriptParser.typeQuery"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitTypeQuery([NotNull] TypeScriptParser.TypeQueryContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="TypeScriptParser.typeQueryExpression"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterTypeQueryExpression([NotNull] TypeScriptParser.TypeQueryExpressionContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="TypeScriptParser.typeQueryExpression"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitTypeQueryExpression([NotNull] TypeScriptParser.TypeQueryExpressionContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="TypeScriptParser.propertySignatur"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterPropertySignatur([NotNull] TypeScriptParser.PropertySignaturContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="TypeScriptParser.propertySignatur"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitPropertySignatur([NotNull] TypeScriptParser.PropertySignaturContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="TypeScriptParser.typeAnnotation"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterTypeAnnotation([NotNull] TypeScriptParser.TypeAnnotationContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="TypeScriptParser.typeAnnotation"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitTypeAnnotation([NotNull] TypeScriptParser.TypeAnnotationContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="TypeScriptParser.callSignature"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterCallSignature([NotNull] TypeScriptParser.CallSignatureContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="TypeScriptParser.callSignature"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitCallSignature([NotNull] TypeScriptParser.CallSignatureContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="TypeScriptParser.parameterList"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterParameterList([NotNull] TypeScriptParser.ParameterListContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="TypeScriptParser.parameterList"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitParameterList([NotNull] TypeScriptParser.ParameterListContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="TypeScriptParser.requiredParameterList"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterRequiredParameterList([NotNull] TypeScriptParser.RequiredParameterListContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="TypeScriptParser.requiredParameterList"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitRequiredParameterList([NotNull] TypeScriptParser.RequiredParameterListContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="TypeScriptParser.parameter"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterParameter([NotNull] TypeScriptParser.ParameterContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="TypeScriptParser.parameter"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitParameter([NotNull] TypeScriptParser.ParameterContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="TypeScriptParser.optionalParameter"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterOptionalParameter([NotNull] TypeScriptParser.OptionalParameterContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="TypeScriptParser.optionalParameter"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitOptionalParameter([NotNull] TypeScriptParser.OptionalParameterContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="TypeScriptParser.restParameter"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterRestParameter([NotNull] TypeScriptParser.RestParameterContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="TypeScriptParser.restParameter"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitRestParameter([NotNull] TypeScriptParser.RestParameterContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="TypeScriptParser.requiredParameter"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterRequiredParameter([NotNull] TypeScriptParser.RequiredParameterContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="TypeScriptParser.requiredParameter"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitRequiredParameter([NotNull] TypeScriptParser.RequiredParameterContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="TypeScriptParser.accessibilityModifier"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterAccessibilityModifier([NotNull] TypeScriptParser.AccessibilityModifierContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="TypeScriptParser.accessibilityModifier"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitAccessibilityModifier([NotNull] TypeScriptParser.AccessibilityModifierContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="TypeScriptParser.identifierOrPattern"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterIdentifierOrPattern([NotNull] TypeScriptParser.IdentifierOrPatternContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="TypeScriptParser.identifierOrPattern"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitIdentifierOrPattern([NotNull] TypeScriptParser.IdentifierOrPatternContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="TypeScriptParser.constructSignature"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterConstructSignature([NotNull] TypeScriptParser.ConstructSignatureContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="TypeScriptParser.constructSignature"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitConstructSignature([NotNull] TypeScriptParser.ConstructSignatureContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="TypeScriptParser.indexSignature"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterIndexSignature([NotNull] TypeScriptParser.IndexSignatureContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="TypeScriptParser.indexSignature"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitIndexSignature([NotNull] TypeScriptParser.IndexSignatureContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="TypeScriptParser.methodSignature"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterMethodSignature([NotNull] TypeScriptParser.MethodSignatureContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="TypeScriptParser.methodSignature"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitMethodSignature([NotNull] TypeScriptParser.MethodSignatureContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="TypeScriptParser.typeAliasDeclaration"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterTypeAliasDeclaration([NotNull] TypeScriptParser.TypeAliasDeclarationContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="TypeScriptParser.typeAliasDeclaration"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitTypeAliasDeclaration([NotNull] TypeScriptParser.TypeAliasDeclarationContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="TypeScriptParser.constructorDeclaration"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterConstructorDeclaration([NotNull] TypeScriptParser.ConstructorDeclarationContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="TypeScriptParser.constructorDeclaration"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitConstructorDeclaration([NotNull] TypeScriptParser.ConstructorDeclarationContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="TypeScriptParser.interfaceDeclaration"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterInterfaceDeclaration([NotNull] TypeScriptParser.InterfaceDeclarationContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="TypeScriptParser.interfaceDeclaration"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitInterfaceDeclaration([NotNull] TypeScriptParser.InterfaceDeclarationContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="TypeScriptParser.interfaceExtendsClause"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterInterfaceExtendsClause([NotNull] TypeScriptParser.InterfaceExtendsClauseContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="TypeScriptParser.interfaceExtendsClause"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitInterfaceExtendsClause([NotNull] TypeScriptParser.InterfaceExtendsClauseContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="TypeScriptParser.classOrInterfaceTypeList"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterClassOrInterfaceTypeList([NotNull] TypeScriptParser.ClassOrInterfaceTypeListContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="TypeScriptParser.classOrInterfaceTypeList"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitClassOrInterfaceTypeList([NotNull] TypeScriptParser.ClassOrInterfaceTypeListContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="TypeScriptParser.enumDeclaration"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterEnumDeclaration([NotNull] TypeScriptParser.EnumDeclarationContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="TypeScriptParser.enumDeclaration"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitEnumDeclaration([NotNull] TypeScriptParser.EnumDeclarationContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="TypeScriptParser.enumBody"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterEnumBody([NotNull] TypeScriptParser.EnumBodyContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="TypeScriptParser.enumBody"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitEnumBody([NotNull] TypeScriptParser.EnumBodyContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="TypeScriptParser.enumMemberList"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterEnumMemberList([NotNull] TypeScriptParser.EnumMemberListContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="TypeScriptParser.enumMemberList"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitEnumMemberList([NotNull] TypeScriptParser.EnumMemberListContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="TypeScriptParser.enumMember"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterEnumMember([NotNull] TypeScriptParser.EnumMemberContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="TypeScriptParser.enumMember"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitEnumMember([NotNull] TypeScriptParser.EnumMemberContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="TypeScriptParser.namespaceDeclaration"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterNamespaceDeclaration([NotNull] TypeScriptParser.NamespaceDeclarationContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="TypeScriptParser.namespaceDeclaration"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitNamespaceDeclaration([NotNull] TypeScriptParser.NamespaceDeclarationContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="TypeScriptParser.namespaceName"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterNamespaceName([NotNull] TypeScriptParser.NamespaceNameContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="TypeScriptParser.namespaceName"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitNamespaceName([NotNull] TypeScriptParser.NamespaceNameContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="TypeScriptParser.importAliasDeclaration"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterImportAliasDeclaration([NotNull] TypeScriptParser.ImportAliasDeclarationContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="TypeScriptParser.importAliasDeclaration"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitImportAliasDeclaration([NotNull] TypeScriptParser.ImportAliasDeclarationContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="TypeScriptParser.decoratorList"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterDecoratorList([NotNull] TypeScriptParser.DecoratorListContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="TypeScriptParser.decoratorList"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitDecoratorList([NotNull] TypeScriptParser.DecoratorListContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="TypeScriptParser.decorator"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterDecorator([NotNull] TypeScriptParser.DecoratorContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="TypeScriptParser.decorator"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitDecorator([NotNull] TypeScriptParser.DecoratorContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="TypeScriptParser.decoratorMemberExpression"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterDecoratorMemberExpression([NotNull] TypeScriptParser.DecoratorMemberExpressionContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="TypeScriptParser.decoratorMemberExpression"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitDecoratorMemberExpression([NotNull] TypeScriptParser.DecoratorMemberExpressionContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="TypeScriptParser.decoratorCallExpression"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterDecoratorCallExpression([NotNull] TypeScriptParser.DecoratorCallExpressionContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="TypeScriptParser.decoratorCallExpression"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitDecoratorCallExpression([NotNull] TypeScriptParser.DecoratorCallExpressionContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="TypeScriptParser.program"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterProgram([NotNull] TypeScriptParser.ProgramContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="TypeScriptParser.program"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitProgram([NotNull] TypeScriptParser.ProgramContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="TypeScriptParser.sourceElement"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterSourceElement([NotNull] TypeScriptParser.SourceElementContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="TypeScriptParser.sourceElement"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitSourceElement([NotNull] TypeScriptParser.SourceElementContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="TypeScriptParser.statement"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterStatement([NotNull] TypeScriptParser.StatementContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="TypeScriptParser.statement"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitStatement([NotNull] TypeScriptParser.StatementContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="TypeScriptParser.block"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterBlock([NotNull] TypeScriptParser.BlockContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="TypeScriptParser.block"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitBlock([NotNull] TypeScriptParser.BlockContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="TypeScriptParser.statementList"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterStatementList([NotNull] TypeScriptParser.StatementListContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="TypeScriptParser.statementList"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitStatementList([NotNull] TypeScriptParser.StatementListContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="TypeScriptParser.abstractDeclaration"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterAbstractDeclaration([NotNull] TypeScriptParser.AbstractDeclarationContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="TypeScriptParser.abstractDeclaration"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitAbstractDeclaration([NotNull] TypeScriptParser.AbstractDeclarationContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="TypeScriptParser.importStatement"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterImportStatement([NotNull] TypeScriptParser.ImportStatementContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="TypeScriptParser.importStatement"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitImportStatement([NotNull] TypeScriptParser.ImportStatementContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="TypeScriptParser.fromBlock"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterFromBlock([NotNull] TypeScriptParser.FromBlockContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="TypeScriptParser.fromBlock"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitFromBlock([NotNull] TypeScriptParser.FromBlockContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="TypeScriptParser.multipleImportStatement"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterMultipleImportStatement([NotNull] TypeScriptParser.MultipleImportStatementContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="TypeScriptParser.multipleImportStatement"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitMultipleImportStatement([NotNull] TypeScriptParser.MultipleImportStatementContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="TypeScriptParser.exportStatement"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterExportStatement([NotNull] TypeScriptParser.ExportStatementContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="TypeScriptParser.exportStatement"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitExportStatement([NotNull] TypeScriptParser.ExportStatementContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="TypeScriptParser.variableStatement"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterVariableStatement([NotNull] TypeScriptParser.VariableStatementContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="TypeScriptParser.variableStatement"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitVariableStatement([NotNull] TypeScriptParser.VariableStatementContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="TypeScriptParser.variableDeclarationList"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterVariableDeclarationList([NotNull] TypeScriptParser.VariableDeclarationListContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="TypeScriptParser.variableDeclarationList"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitVariableDeclarationList([NotNull] TypeScriptParser.VariableDeclarationListContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="TypeScriptParser.variableDeclaration"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterVariableDeclaration([NotNull] TypeScriptParser.VariableDeclarationContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="TypeScriptParser.variableDeclaration"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitVariableDeclaration([NotNull] TypeScriptParser.VariableDeclarationContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="TypeScriptParser.emptyStatement"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterEmptyStatement([NotNull] TypeScriptParser.EmptyStatementContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="TypeScriptParser.emptyStatement"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitEmptyStatement([NotNull] TypeScriptParser.EmptyStatementContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="TypeScriptParser.expressionStatement"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterExpressionStatement([NotNull] TypeScriptParser.ExpressionStatementContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="TypeScriptParser.expressionStatement"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitExpressionStatement([NotNull] TypeScriptParser.ExpressionStatementContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="TypeScriptParser.ifStatement"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterIfStatement([NotNull] TypeScriptParser.IfStatementContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="TypeScriptParser.ifStatement"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitIfStatement([NotNull] TypeScriptParser.IfStatementContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>DoStatement</c>
	/// labeled alternative in <see cref="TypeScriptParser.iterationStatement"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterDoStatement([NotNull] TypeScriptParser.DoStatementContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>DoStatement</c>
	/// labeled alternative in <see cref="TypeScriptParser.iterationStatement"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitDoStatement([NotNull] TypeScriptParser.DoStatementContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>WhileStatement</c>
	/// labeled alternative in <see cref="TypeScriptParser.iterationStatement"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterWhileStatement([NotNull] TypeScriptParser.WhileStatementContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>WhileStatement</c>
	/// labeled alternative in <see cref="TypeScriptParser.iterationStatement"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitWhileStatement([NotNull] TypeScriptParser.WhileStatementContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>ForStatement</c>
	/// labeled alternative in <see cref="TypeScriptParser.iterationStatement"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterForStatement([NotNull] TypeScriptParser.ForStatementContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>ForStatement</c>
	/// labeled alternative in <see cref="TypeScriptParser.iterationStatement"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitForStatement([NotNull] TypeScriptParser.ForStatementContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>ForVarStatement</c>
	/// labeled alternative in <see cref="TypeScriptParser.iterationStatement"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterForVarStatement([NotNull] TypeScriptParser.ForVarStatementContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>ForVarStatement</c>
	/// labeled alternative in <see cref="TypeScriptParser.iterationStatement"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitForVarStatement([NotNull] TypeScriptParser.ForVarStatementContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>ForInStatement</c>
	/// labeled alternative in <see cref="TypeScriptParser.iterationStatement"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterForInStatement([NotNull] TypeScriptParser.ForInStatementContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>ForInStatement</c>
	/// labeled alternative in <see cref="TypeScriptParser.iterationStatement"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitForInStatement([NotNull] TypeScriptParser.ForInStatementContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>ForVarInStatement</c>
	/// labeled alternative in <see cref="TypeScriptParser.iterationStatement"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterForVarInStatement([NotNull] TypeScriptParser.ForVarInStatementContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>ForVarInStatement</c>
	/// labeled alternative in <see cref="TypeScriptParser.iterationStatement"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitForVarInStatement([NotNull] TypeScriptParser.ForVarInStatementContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="TypeScriptParser.varModifier"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterVarModifier([NotNull] TypeScriptParser.VarModifierContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="TypeScriptParser.varModifier"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitVarModifier([NotNull] TypeScriptParser.VarModifierContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="TypeScriptParser.continueStatement"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterContinueStatement([NotNull] TypeScriptParser.ContinueStatementContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="TypeScriptParser.continueStatement"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitContinueStatement([NotNull] TypeScriptParser.ContinueStatementContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="TypeScriptParser.breakStatement"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterBreakStatement([NotNull] TypeScriptParser.BreakStatementContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="TypeScriptParser.breakStatement"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitBreakStatement([NotNull] TypeScriptParser.BreakStatementContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="TypeScriptParser.returnStatement"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterReturnStatement([NotNull] TypeScriptParser.ReturnStatementContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="TypeScriptParser.returnStatement"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitReturnStatement([NotNull] TypeScriptParser.ReturnStatementContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="TypeScriptParser.yieldStatement"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterYieldStatement([NotNull] TypeScriptParser.YieldStatementContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="TypeScriptParser.yieldStatement"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitYieldStatement([NotNull] TypeScriptParser.YieldStatementContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="TypeScriptParser.withStatement"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterWithStatement([NotNull] TypeScriptParser.WithStatementContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="TypeScriptParser.withStatement"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitWithStatement([NotNull] TypeScriptParser.WithStatementContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="TypeScriptParser.switchStatement"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterSwitchStatement([NotNull] TypeScriptParser.SwitchStatementContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="TypeScriptParser.switchStatement"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitSwitchStatement([NotNull] TypeScriptParser.SwitchStatementContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="TypeScriptParser.caseBlock"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterCaseBlock([NotNull] TypeScriptParser.CaseBlockContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="TypeScriptParser.caseBlock"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitCaseBlock([NotNull] TypeScriptParser.CaseBlockContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="TypeScriptParser.caseClauses"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterCaseClauses([NotNull] TypeScriptParser.CaseClausesContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="TypeScriptParser.caseClauses"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitCaseClauses([NotNull] TypeScriptParser.CaseClausesContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="TypeScriptParser.caseClause"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterCaseClause([NotNull] TypeScriptParser.CaseClauseContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="TypeScriptParser.caseClause"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitCaseClause([NotNull] TypeScriptParser.CaseClauseContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="TypeScriptParser.defaultClause"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterDefaultClause([NotNull] TypeScriptParser.DefaultClauseContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="TypeScriptParser.defaultClause"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitDefaultClause([NotNull] TypeScriptParser.DefaultClauseContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="TypeScriptParser.labelledStatement"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterLabelledStatement([NotNull] TypeScriptParser.LabelledStatementContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="TypeScriptParser.labelledStatement"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitLabelledStatement([NotNull] TypeScriptParser.LabelledStatementContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="TypeScriptParser.throwStatement"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterThrowStatement([NotNull] TypeScriptParser.ThrowStatementContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="TypeScriptParser.throwStatement"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitThrowStatement([NotNull] TypeScriptParser.ThrowStatementContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="TypeScriptParser.tryStatement"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterTryStatement([NotNull] TypeScriptParser.TryStatementContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="TypeScriptParser.tryStatement"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitTryStatement([NotNull] TypeScriptParser.TryStatementContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="TypeScriptParser.catchProduction"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterCatchProduction([NotNull] TypeScriptParser.CatchProductionContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="TypeScriptParser.catchProduction"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitCatchProduction([NotNull] TypeScriptParser.CatchProductionContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="TypeScriptParser.finallyProduction"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterFinallyProduction([NotNull] TypeScriptParser.FinallyProductionContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="TypeScriptParser.finallyProduction"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitFinallyProduction([NotNull] TypeScriptParser.FinallyProductionContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="TypeScriptParser.debuggerStatement"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterDebuggerStatement([NotNull] TypeScriptParser.DebuggerStatementContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="TypeScriptParser.debuggerStatement"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitDebuggerStatement([NotNull] TypeScriptParser.DebuggerStatementContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="TypeScriptParser.functionDeclaration"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterFunctionDeclaration([NotNull] TypeScriptParser.FunctionDeclarationContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="TypeScriptParser.functionDeclaration"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitFunctionDeclaration([NotNull] TypeScriptParser.FunctionDeclarationContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="TypeScriptParser.classDeclaration"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterClassDeclaration([NotNull] TypeScriptParser.ClassDeclarationContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="TypeScriptParser.classDeclaration"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitClassDeclaration([NotNull] TypeScriptParser.ClassDeclarationContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="TypeScriptParser.classHeritage"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterClassHeritage([NotNull] TypeScriptParser.ClassHeritageContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="TypeScriptParser.classHeritage"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitClassHeritage([NotNull] TypeScriptParser.ClassHeritageContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="TypeScriptParser.classTail"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterClassTail([NotNull] TypeScriptParser.ClassTailContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="TypeScriptParser.classTail"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitClassTail([NotNull] TypeScriptParser.ClassTailContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="TypeScriptParser.classExtendsClause"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterClassExtendsClause([NotNull] TypeScriptParser.ClassExtendsClauseContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="TypeScriptParser.classExtendsClause"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitClassExtendsClause([NotNull] TypeScriptParser.ClassExtendsClauseContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="TypeScriptParser.implementsClause"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterImplementsClause([NotNull] TypeScriptParser.ImplementsClauseContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="TypeScriptParser.implementsClause"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitImplementsClause([NotNull] TypeScriptParser.ImplementsClauseContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="TypeScriptParser.classElement"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterClassElement([NotNull] TypeScriptParser.ClassElementContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="TypeScriptParser.classElement"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitClassElement([NotNull] TypeScriptParser.ClassElementContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>PropertyDeclarationExpression</c>
	/// labeled alternative in <see cref="TypeScriptParser.propertyMemberDeclaration"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterPropertyDeclarationExpression([NotNull] TypeScriptParser.PropertyDeclarationExpressionContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>PropertyDeclarationExpression</c>
	/// labeled alternative in <see cref="TypeScriptParser.propertyMemberDeclaration"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitPropertyDeclarationExpression([NotNull] TypeScriptParser.PropertyDeclarationExpressionContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>MethodDeclarationExpression</c>
	/// labeled alternative in <see cref="TypeScriptParser.propertyMemberDeclaration"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterMethodDeclarationExpression([NotNull] TypeScriptParser.MethodDeclarationExpressionContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>MethodDeclarationExpression</c>
	/// labeled alternative in <see cref="TypeScriptParser.propertyMemberDeclaration"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitMethodDeclarationExpression([NotNull] TypeScriptParser.MethodDeclarationExpressionContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>GetterSetterDeclarationExpression</c>
	/// labeled alternative in <see cref="TypeScriptParser.propertyMemberDeclaration"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterGetterSetterDeclarationExpression([NotNull] TypeScriptParser.GetterSetterDeclarationExpressionContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>GetterSetterDeclarationExpression</c>
	/// labeled alternative in <see cref="TypeScriptParser.propertyMemberDeclaration"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitGetterSetterDeclarationExpression([NotNull] TypeScriptParser.GetterSetterDeclarationExpressionContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>AbstractMemberDeclaration</c>
	/// labeled alternative in <see cref="TypeScriptParser.propertyMemberDeclaration"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterAbstractMemberDeclaration([NotNull] TypeScriptParser.AbstractMemberDeclarationContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>AbstractMemberDeclaration</c>
	/// labeled alternative in <see cref="TypeScriptParser.propertyMemberDeclaration"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitAbstractMemberDeclaration([NotNull] TypeScriptParser.AbstractMemberDeclarationContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="TypeScriptParser.propertyMemberBase"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterPropertyMemberBase([NotNull] TypeScriptParser.PropertyMemberBaseContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="TypeScriptParser.propertyMemberBase"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitPropertyMemberBase([NotNull] TypeScriptParser.PropertyMemberBaseContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="TypeScriptParser.indexMemberDeclaration"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterIndexMemberDeclaration([NotNull] TypeScriptParser.IndexMemberDeclarationContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="TypeScriptParser.indexMemberDeclaration"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitIndexMemberDeclaration([NotNull] TypeScriptParser.IndexMemberDeclarationContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="TypeScriptParser.generatorMethod"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterGeneratorMethod([NotNull] TypeScriptParser.GeneratorMethodContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="TypeScriptParser.generatorMethod"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitGeneratorMethod([NotNull] TypeScriptParser.GeneratorMethodContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="TypeScriptParser.generatorFunctionDeclaration"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterGeneratorFunctionDeclaration([NotNull] TypeScriptParser.GeneratorFunctionDeclarationContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="TypeScriptParser.generatorFunctionDeclaration"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitGeneratorFunctionDeclaration([NotNull] TypeScriptParser.GeneratorFunctionDeclarationContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="TypeScriptParser.generatorBlock"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterGeneratorBlock([NotNull] TypeScriptParser.GeneratorBlockContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="TypeScriptParser.generatorBlock"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitGeneratorBlock([NotNull] TypeScriptParser.GeneratorBlockContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="TypeScriptParser.generatorDefinition"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterGeneratorDefinition([NotNull] TypeScriptParser.GeneratorDefinitionContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="TypeScriptParser.generatorDefinition"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitGeneratorDefinition([NotNull] TypeScriptParser.GeneratorDefinitionContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="TypeScriptParser.iteratorBlock"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterIteratorBlock([NotNull] TypeScriptParser.IteratorBlockContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="TypeScriptParser.iteratorBlock"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitIteratorBlock([NotNull] TypeScriptParser.IteratorBlockContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="TypeScriptParser.iteratorDefinition"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterIteratorDefinition([NotNull] TypeScriptParser.IteratorDefinitionContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="TypeScriptParser.iteratorDefinition"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitIteratorDefinition([NotNull] TypeScriptParser.IteratorDefinitionContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="TypeScriptParser.formalParameterList"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterFormalParameterList([NotNull] TypeScriptParser.FormalParameterListContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="TypeScriptParser.formalParameterList"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitFormalParameterList([NotNull] TypeScriptParser.FormalParameterListContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="TypeScriptParser.formalParameterArg"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterFormalParameterArg([NotNull] TypeScriptParser.FormalParameterArgContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="TypeScriptParser.formalParameterArg"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitFormalParameterArg([NotNull] TypeScriptParser.FormalParameterArgContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="TypeScriptParser.lastFormalParameterArg"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterLastFormalParameterArg([NotNull] TypeScriptParser.LastFormalParameterArgContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="TypeScriptParser.lastFormalParameterArg"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitLastFormalParameterArg([NotNull] TypeScriptParser.LastFormalParameterArgContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="TypeScriptParser.functionBody"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterFunctionBody([NotNull] TypeScriptParser.FunctionBodyContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="TypeScriptParser.functionBody"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitFunctionBody([NotNull] TypeScriptParser.FunctionBodyContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="TypeScriptParser.sourceElements"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterSourceElements([NotNull] TypeScriptParser.SourceElementsContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="TypeScriptParser.sourceElements"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitSourceElements([NotNull] TypeScriptParser.SourceElementsContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="TypeScriptParser.arrayLiteral"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterArrayLiteral([NotNull] TypeScriptParser.ArrayLiteralContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="TypeScriptParser.arrayLiteral"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitArrayLiteral([NotNull] TypeScriptParser.ArrayLiteralContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="TypeScriptParser.elementList"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterElementList([NotNull] TypeScriptParser.ElementListContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="TypeScriptParser.elementList"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitElementList([NotNull] TypeScriptParser.ElementListContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="TypeScriptParser.arrayElement"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterArrayElement([NotNull] TypeScriptParser.ArrayElementContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="TypeScriptParser.arrayElement"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitArrayElement([NotNull] TypeScriptParser.ArrayElementContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="TypeScriptParser.objectLiteral"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterObjectLiteral([NotNull] TypeScriptParser.ObjectLiteralContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="TypeScriptParser.objectLiteral"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitObjectLiteral([NotNull] TypeScriptParser.ObjectLiteralContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>PropertyExpressionAssignment</c>
	/// labeled alternative in <see cref="TypeScriptParser.propertyAssignment"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterPropertyExpressionAssignment([NotNull] TypeScriptParser.PropertyExpressionAssignmentContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>PropertyExpressionAssignment</c>
	/// labeled alternative in <see cref="TypeScriptParser.propertyAssignment"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitPropertyExpressionAssignment([NotNull] TypeScriptParser.PropertyExpressionAssignmentContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>ComputedPropertyExpressionAssignment</c>
	/// labeled alternative in <see cref="TypeScriptParser.propertyAssignment"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterComputedPropertyExpressionAssignment([NotNull] TypeScriptParser.ComputedPropertyExpressionAssignmentContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>ComputedPropertyExpressionAssignment</c>
	/// labeled alternative in <see cref="TypeScriptParser.propertyAssignment"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitComputedPropertyExpressionAssignment([NotNull] TypeScriptParser.ComputedPropertyExpressionAssignmentContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>PropertyGetter</c>
	/// labeled alternative in <see cref="TypeScriptParser.propertyAssignment"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterPropertyGetter([NotNull] TypeScriptParser.PropertyGetterContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>PropertyGetter</c>
	/// labeled alternative in <see cref="TypeScriptParser.propertyAssignment"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitPropertyGetter([NotNull] TypeScriptParser.PropertyGetterContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>PropertySetter</c>
	/// labeled alternative in <see cref="TypeScriptParser.propertyAssignment"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterPropertySetter([NotNull] TypeScriptParser.PropertySetterContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>PropertySetter</c>
	/// labeled alternative in <see cref="TypeScriptParser.propertyAssignment"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitPropertySetter([NotNull] TypeScriptParser.PropertySetterContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>MethodProperty</c>
	/// labeled alternative in <see cref="TypeScriptParser.propertyAssignment"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterMethodProperty([NotNull] TypeScriptParser.MethodPropertyContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>MethodProperty</c>
	/// labeled alternative in <see cref="TypeScriptParser.propertyAssignment"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitMethodProperty([NotNull] TypeScriptParser.MethodPropertyContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>PropertyShorthand</c>
	/// labeled alternative in <see cref="TypeScriptParser.propertyAssignment"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterPropertyShorthand([NotNull] TypeScriptParser.PropertyShorthandContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>PropertyShorthand</c>
	/// labeled alternative in <see cref="TypeScriptParser.propertyAssignment"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitPropertyShorthand([NotNull] TypeScriptParser.PropertyShorthandContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>RestParameterInObject</c>
	/// labeled alternative in <see cref="TypeScriptParser.propertyAssignment"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterRestParameterInObject([NotNull] TypeScriptParser.RestParameterInObjectContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>RestParameterInObject</c>
	/// labeled alternative in <see cref="TypeScriptParser.propertyAssignment"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitRestParameterInObject([NotNull] TypeScriptParser.RestParameterInObjectContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="TypeScriptParser.getAccessor"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterGetAccessor([NotNull] TypeScriptParser.GetAccessorContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="TypeScriptParser.getAccessor"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitGetAccessor([NotNull] TypeScriptParser.GetAccessorContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="TypeScriptParser.setAccessor"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterSetAccessor([NotNull] TypeScriptParser.SetAccessorContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="TypeScriptParser.setAccessor"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitSetAccessor([NotNull] TypeScriptParser.SetAccessorContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="TypeScriptParser.propertyName"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterPropertyName([NotNull] TypeScriptParser.PropertyNameContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="TypeScriptParser.propertyName"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitPropertyName([NotNull] TypeScriptParser.PropertyNameContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="TypeScriptParser.arguments"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterArguments([NotNull] TypeScriptParser.ArgumentsContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="TypeScriptParser.arguments"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitArguments([NotNull] TypeScriptParser.ArgumentsContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="TypeScriptParser.argumentList"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterArgumentList([NotNull] TypeScriptParser.ArgumentListContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="TypeScriptParser.argumentList"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitArgumentList([NotNull] TypeScriptParser.ArgumentListContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="TypeScriptParser.argument"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterArgument([NotNull] TypeScriptParser.ArgumentContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="TypeScriptParser.argument"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitArgument([NotNull] TypeScriptParser.ArgumentContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="TypeScriptParser.expressionSequence"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterExpressionSequence([NotNull] TypeScriptParser.ExpressionSequenceContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="TypeScriptParser.expressionSequence"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitExpressionSequence([NotNull] TypeScriptParser.ExpressionSequenceContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="TypeScriptParser.functionExpressionDeclaration"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterFunctionExpressionDeclaration([NotNull] TypeScriptParser.FunctionExpressionDeclarationContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="TypeScriptParser.functionExpressionDeclaration"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitFunctionExpressionDeclaration([NotNull] TypeScriptParser.FunctionExpressionDeclarationContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>TemplateStringExpression</c>
	/// labeled alternative in <see cref="TypeScriptParser.singleExpression"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterTemplateStringExpression([NotNull] TypeScriptParser.TemplateStringExpressionContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>TemplateStringExpression</c>
	/// labeled alternative in <see cref="TypeScriptParser.singleExpression"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitTemplateStringExpression([NotNull] TypeScriptParser.TemplateStringExpressionContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>TernaryExpression</c>
	/// labeled alternative in <see cref="TypeScriptParser.singleExpression"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterTernaryExpression([NotNull] TypeScriptParser.TernaryExpressionContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>TernaryExpression</c>
	/// labeled alternative in <see cref="TypeScriptParser.singleExpression"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitTernaryExpression([NotNull] TypeScriptParser.TernaryExpressionContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>LogicalAndExpression</c>
	/// labeled alternative in <see cref="TypeScriptParser.singleExpression"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterLogicalAndExpression([NotNull] TypeScriptParser.LogicalAndExpressionContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>LogicalAndExpression</c>
	/// labeled alternative in <see cref="TypeScriptParser.singleExpression"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitLogicalAndExpression([NotNull] TypeScriptParser.LogicalAndExpressionContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>GeneratorsExpression</c>
	/// labeled alternative in <see cref="TypeScriptParser.singleExpression"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterGeneratorsExpression([NotNull] TypeScriptParser.GeneratorsExpressionContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>GeneratorsExpression</c>
	/// labeled alternative in <see cref="TypeScriptParser.singleExpression"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitGeneratorsExpression([NotNull] TypeScriptParser.GeneratorsExpressionContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>PreIncrementExpression</c>
	/// labeled alternative in <see cref="TypeScriptParser.singleExpression"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterPreIncrementExpression([NotNull] TypeScriptParser.PreIncrementExpressionContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>PreIncrementExpression</c>
	/// labeled alternative in <see cref="TypeScriptParser.singleExpression"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitPreIncrementExpression([NotNull] TypeScriptParser.PreIncrementExpressionContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>ObjectLiteralExpression</c>
	/// labeled alternative in <see cref="TypeScriptParser.singleExpression"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterObjectLiteralExpression([NotNull] TypeScriptParser.ObjectLiteralExpressionContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>ObjectLiteralExpression</c>
	/// labeled alternative in <see cref="TypeScriptParser.singleExpression"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitObjectLiteralExpression([NotNull] TypeScriptParser.ObjectLiteralExpressionContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>InExpression</c>
	/// labeled alternative in <see cref="TypeScriptParser.singleExpression"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterInExpression([NotNull] TypeScriptParser.InExpressionContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>InExpression</c>
	/// labeled alternative in <see cref="TypeScriptParser.singleExpression"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitInExpression([NotNull] TypeScriptParser.InExpressionContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>LogicalOrExpression</c>
	/// labeled alternative in <see cref="TypeScriptParser.singleExpression"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterLogicalOrExpression([NotNull] TypeScriptParser.LogicalOrExpressionContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>LogicalOrExpression</c>
	/// labeled alternative in <see cref="TypeScriptParser.singleExpression"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitLogicalOrExpression([NotNull] TypeScriptParser.LogicalOrExpressionContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>GenericTypes</c>
	/// labeled alternative in <see cref="TypeScriptParser.singleExpression"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterGenericTypes([NotNull] TypeScriptParser.GenericTypesContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>GenericTypes</c>
	/// labeled alternative in <see cref="TypeScriptParser.singleExpression"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitGenericTypes([NotNull] TypeScriptParser.GenericTypesContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>NotExpression</c>
	/// labeled alternative in <see cref="TypeScriptParser.singleExpression"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterNotExpression([NotNull] TypeScriptParser.NotExpressionContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>NotExpression</c>
	/// labeled alternative in <see cref="TypeScriptParser.singleExpression"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitNotExpression([NotNull] TypeScriptParser.NotExpressionContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>PreDecreaseExpression</c>
	/// labeled alternative in <see cref="TypeScriptParser.singleExpression"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterPreDecreaseExpression([NotNull] TypeScriptParser.PreDecreaseExpressionContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>PreDecreaseExpression</c>
	/// labeled alternative in <see cref="TypeScriptParser.singleExpression"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitPreDecreaseExpression([NotNull] TypeScriptParser.PreDecreaseExpressionContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>ArgumentsExpression</c>
	/// labeled alternative in <see cref="TypeScriptParser.singleExpression"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterArgumentsExpression([NotNull] TypeScriptParser.ArgumentsExpressionContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>ArgumentsExpression</c>
	/// labeled alternative in <see cref="TypeScriptParser.singleExpression"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitArgumentsExpression([NotNull] TypeScriptParser.ArgumentsExpressionContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>ThisExpression</c>
	/// labeled alternative in <see cref="TypeScriptParser.singleExpression"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterThisExpression([NotNull] TypeScriptParser.ThisExpressionContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>ThisExpression</c>
	/// labeled alternative in <see cref="TypeScriptParser.singleExpression"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitThisExpression([NotNull] TypeScriptParser.ThisExpressionContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>FunctionExpression</c>
	/// labeled alternative in <see cref="TypeScriptParser.singleExpression"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterFunctionExpression([NotNull] TypeScriptParser.FunctionExpressionContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>FunctionExpression</c>
	/// labeled alternative in <see cref="TypeScriptParser.singleExpression"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitFunctionExpression([NotNull] TypeScriptParser.FunctionExpressionContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>UnaryMinusExpression</c>
	/// labeled alternative in <see cref="TypeScriptParser.singleExpression"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterUnaryMinusExpression([NotNull] TypeScriptParser.UnaryMinusExpressionContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>UnaryMinusExpression</c>
	/// labeled alternative in <see cref="TypeScriptParser.singleExpression"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitUnaryMinusExpression([NotNull] TypeScriptParser.UnaryMinusExpressionContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>AssignmentExpression</c>
	/// labeled alternative in <see cref="TypeScriptParser.singleExpression"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterAssignmentExpression([NotNull] TypeScriptParser.AssignmentExpressionContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>AssignmentExpression</c>
	/// labeled alternative in <see cref="TypeScriptParser.singleExpression"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitAssignmentExpression([NotNull] TypeScriptParser.AssignmentExpressionContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>PostDecreaseExpression</c>
	/// labeled alternative in <see cref="TypeScriptParser.singleExpression"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterPostDecreaseExpression([NotNull] TypeScriptParser.PostDecreaseExpressionContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>PostDecreaseExpression</c>
	/// labeled alternative in <see cref="TypeScriptParser.singleExpression"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitPostDecreaseExpression([NotNull] TypeScriptParser.PostDecreaseExpressionContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>TypeofExpression</c>
	/// labeled alternative in <see cref="TypeScriptParser.singleExpression"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterTypeofExpression([NotNull] TypeScriptParser.TypeofExpressionContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>TypeofExpression</c>
	/// labeled alternative in <see cref="TypeScriptParser.singleExpression"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitTypeofExpression([NotNull] TypeScriptParser.TypeofExpressionContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>InstanceofExpression</c>
	/// labeled alternative in <see cref="TypeScriptParser.singleExpression"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterInstanceofExpression([NotNull] TypeScriptParser.InstanceofExpressionContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>InstanceofExpression</c>
	/// labeled alternative in <see cref="TypeScriptParser.singleExpression"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitInstanceofExpression([NotNull] TypeScriptParser.InstanceofExpressionContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>UnaryPlusExpression</c>
	/// labeled alternative in <see cref="TypeScriptParser.singleExpression"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterUnaryPlusExpression([NotNull] TypeScriptParser.UnaryPlusExpressionContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>UnaryPlusExpression</c>
	/// labeled alternative in <see cref="TypeScriptParser.singleExpression"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitUnaryPlusExpression([NotNull] TypeScriptParser.UnaryPlusExpressionContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>DeleteExpression</c>
	/// labeled alternative in <see cref="TypeScriptParser.singleExpression"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterDeleteExpression([NotNull] TypeScriptParser.DeleteExpressionContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>DeleteExpression</c>
	/// labeled alternative in <see cref="TypeScriptParser.singleExpression"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitDeleteExpression([NotNull] TypeScriptParser.DeleteExpressionContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>GeneratorsFunctionExpression</c>
	/// labeled alternative in <see cref="TypeScriptParser.singleExpression"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterGeneratorsFunctionExpression([NotNull] TypeScriptParser.GeneratorsFunctionExpressionContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>GeneratorsFunctionExpression</c>
	/// labeled alternative in <see cref="TypeScriptParser.singleExpression"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitGeneratorsFunctionExpression([NotNull] TypeScriptParser.GeneratorsFunctionExpressionContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>ArrowFunctionExpression</c>
	/// labeled alternative in <see cref="TypeScriptParser.singleExpression"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterArrowFunctionExpression([NotNull] TypeScriptParser.ArrowFunctionExpressionContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>ArrowFunctionExpression</c>
	/// labeled alternative in <see cref="TypeScriptParser.singleExpression"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitArrowFunctionExpression([NotNull] TypeScriptParser.ArrowFunctionExpressionContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>IteratorsExpression</c>
	/// labeled alternative in <see cref="TypeScriptParser.singleExpression"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterIteratorsExpression([NotNull] TypeScriptParser.IteratorsExpressionContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>IteratorsExpression</c>
	/// labeled alternative in <see cref="TypeScriptParser.singleExpression"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitIteratorsExpression([NotNull] TypeScriptParser.IteratorsExpressionContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>EqualityExpression</c>
	/// labeled alternative in <see cref="TypeScriptParser.singleExpression"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterEqualityExpression([NotNull] TypeScriptParser.EqualityExpressionContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>EqualityExpression</c>
	/// labeled alternative in <see cref="TypeScriptParser.singleExpression"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitEqualityExpression([NotNull] TypeScriptParser.EqualityExpressionContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>BitXOrExpression</c>
	/// labeled alternative in <see cref="TypeScriptParser.singleExpression"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterBitXOrExpression([NotNull] TypeScriptParser.BitXOrExpressionContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>BitXOrExpression</c>
	/// labeled alternative in <see cref="TypeScriptParser.singleExpression"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitBitXOrExpression([NotNull] TypeScriptParser.BitXOrExpressionContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>CastAsExpression</c>
	/// labeled alternative in <see cref="TypeScriptParser.singleExpression"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterCastAsExpression([NotNull] TypeScriptParser.CastAsExpressionContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>CastAsExpression</c>
	/// labeled alternative in <see cref="TypeScriptParser.singleExpression"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitCastAsExpression([NotNull] TypeScriptParser.CastAsExpressionContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>SuperExpression</c>
	/// labeled alternative in <see cref="TypeScriptParser.singleExpression"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterSuperExpression([NotNull] TypeScriptParser.SuperExpressionContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>SuperExpression</c>
	/// labeled alternative in <see cref="TypeScriptParser.singleExpression"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitSuperExpression([NotNull] TypeScriptParser.SuperExpressionContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>MultiplicativeExpression</c>
	/// labeled alternative in <see cref="TypeScriptParser.singleExpression"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterMultiplicativeExpression([NotNull] TypeScriptParser.MultiplicativeExpressionContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>MultiplicativeExpression</c>
	/// labeled alternative in <see cref="TypeScriptParser.singleExpression"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitMultiplicativeExpression([NotNull] TypeScriptParser.MultiplicativeExpressionContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>BitShiftExpression</c>
	/// labeled alternative in <see cref="TypeScriptParser.singleExpression"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterBitShiftExpression([NotNull] TypeScriptParser.BitShiftExpressionContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>BitShiftExpression</c>
	/// labeled alternative in <see cref="TypeScriptParser.singleExpression"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitBitShiftExpression([NotNull] TypeScriptParser.BitShiftExpressionContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>ParenthesizedExpression</c>
	/// labeled alternative in <see cref="TypeScriptParser.singleExpression"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterParenthesizedExpression([NotNull] TypeScriptParser.ParenthesizedExpressionContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>ParenthesizedExpression</c>
	/// labeled alternative in <see cref="TypeScriptParser.singleExpression"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitParenthesizedExpression([NotNull] TypeScriptParser.ParenthesizedExpressionContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>AdditiveExpression</c>
	/// labeled alternative in <see cref="TypeScriptParser.singleExpression"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterAdditiveExpression([NotNull] TypeScriptParser.AdditiveExpressionContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>AdditiveExpression</c>
	/// labeled alternative in <see cref="TypeScriptParser.singleExpression"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitAdditiveExpression([NotNull] TypeScriptParser.AdditiveExpressionContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>RelationalExpression</c>
	/// labeled alternative in <see cref="TypeScriptParser.singleExpression"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterRelationalExpression([NotNull] TypeScriptParser.RelationalExpressionContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>RelationalExpression</c>
	/// labeled alternative in <see cref="TypeScriptParser.singleExpression"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitRelationalExpression([NotNull] TypeScriptParser.RelationalExpressionContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>PostIncrementExpression</c>
	/// labeled alternative in <see cref="TypeScriptParser.singleExpression"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterPostIncrementExpression([NotNull] TypeScriptParser.PostIncrementExpressionContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>PostIncrementExpression</c>
	/// labeled alternative in <see cref="TypeScriptParser.singleExpression"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitPostIncrementExpression([NotNull] TypeScriptParser.PostIncrementExpressionContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>YieldExpression</c>
	/// labeled alternative in <see cref="TypeScriptParser.singleExpression"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterYieldExpression([NotNull] TypeScriptParser.YieldExpressionContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>YieldExpression</c>
	/// labeled alternative in <see cref="TypeScriptParser.singleExpression"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitYieldExpression([NotNull] TypeScriptParser.YieldExpressionContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>BitNotExpression</c>
	/// labeled alternative in <see cref="TypeScriptParser.singleExpression"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterBitNotExpression([NotNull] TypeScriptParser.BitNotExpressionContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>BitNotExpression</c>
	/// labeled alternative in <see cref="TypeScriptParser.singleExpression"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitBitNotExpression([NotNull] TypeScriptParser.BitNotExpressionContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>NewExpression</c>
	/// labeled alternative in <see cref="TypeScriptParser.singleExpression"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterNewExpression([NotNull] TypeScriptParser.NewExpressionContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>NewExpression</c>
	/// labeled alternative in <see cref="TypeScriptParser.singleExpression"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitNewExpression([NotNull] TypeScriptParser.NewExpressionContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>LiteralExpression</c>
	/// labeled alternative in <see cref="TypeScriptParser.singleExpression"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterLiteralExpression([NotNull] TypeScriptParser.LiteralExpressionContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>LiteralExpression</c>
	/// labeled alternative in <see cref="TypeScriptParser.singleExpression"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitLiteralExpression([NotNull] TypeScriptParser.LiteralExpressionContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>ArrayLiteralExpression</c>
	/// labeled alternative in <see cref="TypeScriptParser.singleExpression"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterArrayLiteralExpression([NotNull] TypeScriptParser.ArrayLiteralExpressionContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>ArrayLiteralExpression</c>
	/// labeled alternative in <see cref="TypeScriptParser.singleExpression"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitArrayLiteralExpression([NotNull] TypeScriptParser.ArrayLiteralExpressionContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>MemberDotExpression</c>
	/// labeled alternative in <see cref="TypeScriptParser.singleExpression"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterMemberDotExpression([NotNull] TypeScriptParser.MemberDotExpressionContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>MemberDotExpression</c>
	/// labeled alternative in <see cref="TypeScriptParser.singleExpression"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitMemberDotExpression([NotNull] TypeScriptParser.MemberDotExpressionContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>ClassExpression</c>
	/// labeled alternative in <see cref="TypeScriptParser.singleExpression"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterClassExpression([NotNull] TypeScriptParser.ClassExpressionContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>ClassExpression</c>
	/// labeled alternative in <see cref="TypeScriptParser.singleExpression"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitClassExpression([NotNull] TypeScriptParser.ClassExpressionContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>MemberIndexExpression</c>
	/// labeled alternative in <see cref="TypeScriptParser.singleExpression"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterMemberIndexExpression([NotNull] TypeScriptParser.MemberIndexExpressionContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>MemberIndexExpression</c>
	/// labeled alternative in <see cref="TypeScriptParser.singleExpression"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitMemberIndexExpression([NotNull] TypeScriptParser.MemberIndexExpressionContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>IdentifierExpression</c>
	/// labeled alternative in <see cref="TypeScriptParser.singleExpression"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterIdentifierExpression([NotNull] TypeScriptParser.IdentifierExpressionContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>IdentifierExpression</c>
	/// labeled alternative in <see cref="TypeScriptParser.singleExpression"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitIdentifierExpression([NotNull] TypeScriptParser.IdentifierExpressionContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>BitAndExpression</c>
	/// labeled alternative in <see cref="TypeScriptParser.singleExpression"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterBitAndExpression([NotNull] TypeScriptParser.BitAndExpressionContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>BitAndExpression</c>
	/// labeled alternative in <see cref="TypeScriptParser.singleExpression"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitBitAndExpression([NotNull] TypeScriptParser.BitAndExpressionContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>BitOrExpression</c>
	/// labeled alternative in <see cref="TypeScriptParser.singleExpression"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterBitOrExpression([NotNull] TypeScriptParser.BitOrExpressionContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>BitOrExpression</c>
	/// labeled alternative in <see cref="TypeScriptParser.singleExpression"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitBitOrExpression([NotNull] TypeScriptParser.BitOrExpressionContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>AssignmentOperatorExpression</c>
	/// labeled alternative in <see cref="TypeScriptParser.singleExpression"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterAssignmentOperatorExpression([NotNull] TypeScriptParser.AssignmentOperatorExpressionContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>AssignmentOperatorExpression</c>
	/// labeled alternative in <see cref="TypeScriptParser.singleExpression"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitAssignmentOperatorExpression([NotNull] TypeScriptParser.AssignmentOperatorExpressionContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>VoidExpression</c>
	/// labeled alternative in <see cref="TypeScriptParser.singleExpression"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterVoidExpression([NotNull] TypeScriptParser.VoidExpressionContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>VoidExpression</c>
	/// labeled alternative in <see cref="TypeScriptParser.singleExpression"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitVoidExpression([NotNull] TypeScriptParser.VoidExpressionContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="TypeScriptParser.asExpression"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterAsExpression([NotNull] TypeScriptParser.AsExpressionContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="TypeScriptParser.asExpression"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitAsExpression([NotNull] TypeScriptParser.AsExpressionContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="TypeScriptParser.arrowFunctionDeclaration"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterArrowFunctionDeclaration([NotNull] TypeScriptParser.ArrowFunctionDeclarationContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="TypeScriptParser.arrowFunctionDeclaration"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitArrowFunctionDeclaration([NotNull] TypeScriptParser.ArrowFunctionDeclarationContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="TypeScriptParser.arrowFunctionParameters"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterArrowFunctionParameters([NotNull] TypeScriptParser.ArrowFunctionParametersContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="TypeScriptParser.arrowFunctionParameters"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitArrowFunctionParameters([NotNull] TypeScriptParser.ArrowFunctionParametersContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="TypeScriptParser.arrowFunctionBody"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterArrowFunctionBody([NotNull] TypeScriptParser.ArrowFunctionBodyContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="TypeScriptParser.arrowFunctionBody"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitArrowFunctionBody([NotNull] TypeScriptParser.ArrowFunctionBodyContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="TypeScriptParser.assignmentOperator"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterAssignmentOperator([NotNull] TypeScriptParser.AssignmentOperatorContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="TypeScriptParser.assignmentOperator"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitAssignmentOperator([NotNull] TypeScriptParser.AssignmentOperatorContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="TypeScriptParser.literal"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterLiteral([NotNull] TypeScriptParser.LiteralContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="TypeScriptParser.literal"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitLiteral([NotNull] TypeScriptParser.LiteralContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="TypeScriptParser.numericLiteral"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterNumericLiteral([NotNull] TypeScriptParser.NumericLiteralContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="TypeScriptParser.numericLiteral"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitNumericLiteral([NotNull] TypeScriptParser.NumericLiteralContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="TypeScriptParser.identifierName"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterIdentifierName([NotNull] TypeScriptParser.IdentifierNameContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="TypeScriptParser.identifierName"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitIdentifierName([NotNull] TypeScriptParser.IdentifierNameContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="TypeScriptParser.identifierOrKeyWord"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterIdentifierOrKeyWord([NotNull] TypeScriptParser.IdentifierOrKeyWordContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="TypeScriptParser.identifierOrKeyWord"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitIdentifierOrKeyWord([NotNull] TypeScriptParser.IdentifierOrKeyWordContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="TypeScriptParser.reservedWord"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterReservedWord([NotNull] TypeScriptParser.ReservedWordContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="TypeScriptParser.reservedWord"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitReservedWord([NotNull] TypeScriptParser.ReservedWordContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="TypeScriptParser.keyword"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterKeyword([NotNull] TypeScriptParser.KeywordContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="TypeScriptParser.keyword"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitKeyword([NotNull] TypeScriptParser.KeywordContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="TypeScriptParser.getter"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterGetter([NotNull] TypeScriptParser.GetterContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="TypeScriptParser.getter"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitGetter([NotNull] TypeScriptParser.GetterContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="TypeScriptParser.setter"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterSetter([NotNull] TypeScriptParser.SetterContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="TypeScriptParser.setter"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitSetter([NotNull] TypeScriptParser.SetterContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="TypeScriptParser.eos"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterEos([NotNull] TypeScriptParser.EosContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="TypeScriptParser.eos"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitEos([NotNull] TypeScriptParser.EosContext context) { }

	/// <inheritdoc/>
	/// <remarks>The default implementation does nothing.</remarks>
	public virtual void EnterEveryRule([NotNull] ParserRuleContext context) { }
	/// <inheritdoc/>
	/// <remarks>The default implementation does nothing.</remarks>
	public virtual void ExitEveryRule([NotNull] ParserRuleContext context) { }
	/// <inheritdoc/>
	/// <remarks>The default implementation does nothing.</remarks>
	public virtual void VisitTerminal([NotNull] ITerminalNode node) { }
	/// <inheritdoc/>
	/// <remarks>The default implementation does nothing.</remarks>
	public virtual void VisitErrorNode([NotNull] IErrorNode node) { }
}

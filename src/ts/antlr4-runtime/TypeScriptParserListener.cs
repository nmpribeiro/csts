//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.8
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from /Users/nmpribeiro/work/prog_lang/csts_gh/src/ts/TypeScriptParser.g4 by ANTLR 4.8

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using Antlr4.Runtime.Misc;
using IParseTreeListener = Antlr4.Runtime.Tree.IParseTreeListener;
using IToken = Antlr4.Runtime.IToken;

/// <summary>
/// This interface defines a complete listener for a parse tree produced by
/// <see cref="TypeScriptParser"/>.
/// </summary>
[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.8")]
[System.CLSCompliant(false)]
public interface ITypeScriptParserListener : IParseTreeListener {
	/// <summary>
	/// Enter a parse tree produced by <see cref="TypeScriptParser.initializer"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterInitializer([NotNull] TypeScriptParser.InitializerContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="TypeScriptParser.initializer"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitInitializer([NotNull] TypeScriptParser.InitializerContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="TypeScriptParser.bindingPattern"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterBindingPattern([NotNull] TypeScriptParser.BindingPatternContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="TypeScriptParser.bindingPattern"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitBindingPattern([NotNull] TypeScriptParser.BindingPatternContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="TypeScriptParser.typeParameters"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterTypeParameters([NotNull] TypeScriptParser.TypeParametersContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="TypeScriptParser.typeParameters"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitTypeParameters([NotNull] TypeScriptParser.TypeParametersContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="TypeScriptParser.typeParameterList"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterTypeParameterList([NotNull] TypeScriptParser.TypeParameterListContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="TypeScriptParser.typeParameterList"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitTypeParameterList([NotNull] TypeScriptParser.TypeParameterListContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="TypeScriptParser.typeParameter"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterTypeParameter([NotNull] TypeScriptParser.TypeParameterContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="TypeScriptParser.typeParameter"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitTypeParameter([NotNull] TypeScriptParser.TypeParameterContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="TypeScriptParser.constraint"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterConstraint([NotNull] TypeScriptParser.ConstraintContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="TypeScriptParser.constraint"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitConstraint([NotNull] TypeScriptParser.ConstraintContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="TypeScriptParser.typeArguments"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterTypeArguments([NotNull] TypeScriptParser.TypeArgumentsContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="TypeScriptParser.typeArguments"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitTypeArguments([NotNull] TypeScriptParser.TypeArgumentsContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="TypeScriptParser.typeArgumentList"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterTypeArgumentList([NotNull] TypeScriptParser.TypeArgumentListContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="TypeScriptParser.typeArgumentList"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitTypeArgumentList([NotNull] TypeScriptParser.TypeArgumentListContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="TypeScriptParser.typeArgument"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterTypeArgument([NotNull] TypeScriptParser.TypeArgumentContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="TypeScriptParser.typeArgument"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitTypeArgument([NotNull] TypeScriptParser.TypeArgumentContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="TypeScriptParser.type_"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterType_([NotNull] TypeScriptParser.Type_Context context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="TypeScriptParser.type_"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitType_([NotNull] TypeScriptParser.Type_Context context);
	/// <summary>
	/// Enter a parse tree produced by the <c>Intersection</c>
	/// labeled alternative in <see cref="TypeScriptParser.unionOrIntersectionOrPrimaryType"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterIntersection([NotNull] TypeScriptParser.IntersectionContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>Intersection</c>
	/// labeled alternative in <see cref="TypeScriptParser.unionOrIntersectionOrPrimaryType"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitIntersection([NotNull] TypeScriptParser.IntersectionContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>Primary</c>
	/// labeled alternative in <see cref="TypeScriptParser.unionOrIntersectionOrPrimaryType"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterPrimary([NotNull] TypeScriptParser.PrimaryContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>Primary</c>
	/// labeled alternative in <see cref="TypeScriptParser.unionOrIntersectionOrPrimaryType"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitPrimary([NotNull] TypeScriptParser.PrimaryContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>Union</c>
	/// labeled alternative in <see cref="TypeScriptParser.unionOrIntersectionOrPrimaryType"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterUnion([NotNull] TypeScriptParser.UnionContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>Union</c>
	/// labeled alternative in <see cref="TypeScriptParser.unionOrIntersectionOrPrimaryType"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitUnion([NotNull] TypeScriptParser.UnionContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>RedefinitionOfType</c>
	/// labeled alternative in <see cref="TypeScriptParser.primaryType"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterRedefinitionOfType([NotNull] TypeScriptParser.RedefinitionOfTypeContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>RedefinitionOfType</c>
	/// labeled alternative in <see cref="TypeScriptParser.primaryType"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitRedefinitionOfType([NotNull] TypeScriptParser.RedefinitionOfTypeContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>PredefinedPrimType</c>
	/// labeled alternative in <see cref="TypeScriptParser.primaryType"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterPredefinedPrimType([NotNull] TypeScriptParser.PredefinedPrimTypeContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>PredefinedPrimType</c>
	/// labeled alternative in <see cref="TypeScriptParser.primaryType"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitPredefinedPrimType([NotNull] TypeScriptParser.PredefinedPrimTypeContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>ArrayPrimType</c>
	/// labeled alternative in <see cref="TypeScriptParser.primaryType"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterArrayPrimType([NotNull] TypeScriptParser.ArrayPrimTypeContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>ArrayPrimType</c>
	/// labeled alternative in <see cref="TypeScriptParser.primaryType"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitArrayPrimType([NotNull] TypeScriptParser.ArrayPrimTypeContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>ParenthesizedPrimType</c>
	/// labeled alternative in <see cref="TypeScriptParser.primaryType"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterParenthesizedPrimType([NotNull] TypeScriptParser.ParenthesizedPrimTypeContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>ParenthesizedPrimType</c>
	/// labeled alternative in <see cref="TypeScriptParser.primaryType"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitParenthesizedPrimType([NotNull] TypeScriptParser.ParenthesizedPrimTypeContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>ThisPrimType</c>
	/// labeled alternative in <see cref="TypeScriptParser.primaryType"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterThisPrimType([NotNull] TypeScriptParser.ThisPrimTypeContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>ThisPrimType</c>
	/// labeled alternative in <see cref="TypeScriptParser.primaryType"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitThisPrimType([NotNull] TypeScriptParser.ThisPrimTypeContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>TuplePrimType</c>
	/// labeled alternative in <see cref="TypeScriptParser.primaryType"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterTuplePrimType([NotNull] TypeScriptParser.TuplePrimTypeContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>TuplePrimType</c>
	/// labeled alternative in <see cref="TypeScriptParser.primaryType"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitTuplePrimType([NotNull] TypeScriptParser.TuplePrimTypeContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>ObjectPrimType</c>
	/// labeled alternative in <see cref="TypeScriptParser.primaryType"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterObjectPrimType([NotNull] TypeScriptParser.ObjectPrimTypeContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>ObjectPrimType</c>
	/// labeled alternative in <see cref="TypeScriptParser.primaryType"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitObjectPrimType([NotNull] TypeScriptParser.ObjectPrimTypeContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>ReferencePrimType</c>
	/// labeled alternative in <see cref="TypeScriptParser.primaryType"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterReferencePrimType([NotNull] TypeScriptParser.ReferencePrimTypeContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>ReferencePrimType</c>
	/// labeled alternative in <see cref="TypeScriptParser.primaryType"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitReferencePrimType([NotNull] TypeScriptParser.ReferencePrimTypeContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>QueryPrimType</c>
	/// labeled alternative in <see cref="TypeScriptParser.primaryType"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterQueryPrimType([NotNull] TypeScriptParser.QueryPrimTypeContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>QueryPrimType</c>
	/// labeled alternative in <see cref="TypeScriptParser.primaryType"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitQueryPrimType([NotNull] TypeScriptParser.QueryPrimTypeContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="TypeScriptParser.predefinedType"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterPredefinedType([NotNull] TypeScriptParser.PredefinedTypeContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="TypeScriptParser.predefinedType"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitPredefinedType([NotNull] TypeScriptParser.PredefinedTypeContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="TypeScriptParser.typeReference"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterTypeReference([NotNull] TypeScriptParser.TypeReferenceContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="TypeScriptParser.typeReference"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitTypeReference([NotNull] TypeScriptParser.TypeReferenceContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="TypeScriptParser.nestedTypeGeneric"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterNestedTypeGeneric([NotNull] TypeScriptParser.NestedTypeGenericContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="TypeScriptParser.nestedTypeGeneric"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitNestedTypeGeneric([NotNull] TypeScriptParser.NestedTypeGenericContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="TypeScriptParser.typeGeneric"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterTypeGeneric([NotNull] TypeScriptParser.TypeGenericContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="TypeScriptParser.typeGeneric"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitTypeGeneric([NotNull] TypeScriptParser.TypeGenericContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="TypeScriptParser.typeIncludeGeneric"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterTypeIncludeGeneric([NotNull] TypeScriptParser.TypeIncludeGenericContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="TypeScriptParser.typeIncludeGeneric"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitTypeIncludeGeneric([NotNull] TypeScriptParser.TypeIncludeGenericContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="TypeScriptParser.typeName"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterTypeName([NotNull] TypeScriptParser.TypeNameContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="TypeScriptParser.typeName"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitTypeName([NotNull] TypeScriptParser.TypeNameContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="TypeScriptParser.objectType"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterObjectType([NotNull] TypeScriptParser.ObjectTypeContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="TypeScriptParser.objectType"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitObjectType([NotNull] TypeScriptParser.ObjectTypeContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="TypeScriptParser.typeBody"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterTypeBody([NotNull] TypeScriptParser.TypeBodyContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="TypeScriptParser.typeBody"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitTypeBody([NotNull] TypeScriptParser.TypeBodyContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="TypeScriptParser.typeMemberList"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterTypeMemberList([NotNull] TypeScriptParser.TypeMemberListContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="TypeScriptParser.typeMemberList"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitTypeMemberList([NotNull] TypeScriptParser.TypeMemberListContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="TypeScriptParser.typeMember"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterTypeMember([NotNull] TypeScriptParser.TypeMemberContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="TypeScriptParser.typeMember"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitTypeMember([NotNull] TypeScriptParser.TypeMemberContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="TypeScriptParser.arrayType"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterArrayType([NotNull] TypeScriptParser.ArrayTypeContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="TypeScriptParser.arrayType"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitArrayType([NotNull] TypeScriptParser.ArrayTypeContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="TypeScriptParser.tupleType"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterTupleType([NotNull] TypeScriptParser.TupleTypeContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="TypeScriptParser.tupleType"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitTupleType([NotNull] TypeScriptParser.TupleTypeContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="TypeScriptParser.tupleElementTypes"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterTupleElementTypes([NotNull] TypeScriptParser.TupleElementTypesContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="TypeScriptParser.tupleElementTypes"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitTupleElementTypes([NotNull] TypeScriptParser.TupleElementTypesContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="TypeScriptParser.functionType"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterFunctionType([NotNull] TypeScriptParser.FunctionTypeContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="TypeScriptParser.functionType"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitFunctionType([NotNull] TypeScriptParser.FunctionTypeContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="TypeScriptParser.constructorType"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterConstructorType([NotNull] TypeScriptParser.ConstructorTypeContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="TypeScriptParser.constructorType"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitConstructorType([NotNull] TypeScriptParser.ConstructorTypeContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="TypeScriptParser.typeQuery"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterTypeQuery([NotNull] TypeScriptParser.TypeQueryContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="TypeScriptParser.typeQuery"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitTypeQuery([NotNull] TypeScriptParser.TypeQueryContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="TypeScriptParser.typeQueryExpression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterTypeQueryExpression([NotNull] TypeScriptParser.TypeQueryExpressionContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="TypeScriptParser.typeQueryExpression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitTypeQueryExpression([NotNull] TypeScriptParser.TypeQueryExpressionContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="TypeScriptParser.propertySignatur"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterPropertySignatur([NotNull] TypeScriptParser.PropertySignaturContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="TypeScriptParser.propertySignatur"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitPropertySignatur([NotNull] TypeScriptParser.PropertySignaturContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="TypeScriptParser.typeAnnotation"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterTypeAnnotation([NotNull] TypeScriptParser.TypeAnnotationContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="TypeScriptParser.typeAnnotation"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitTypeAnnotation([NotNull] TypeScriptParser.TypeAnnotationContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="TypeScriptParser.callSignature"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterCallSignature([NotNull] TypeScriptParser.CallSignatureContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="TypeScriptParser.callSignature"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitCallSignature([NotNull] TypeScriptParser.CallSignatureContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="TypeScriptParser.parameterList"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterParameterList([NotNull] TypeScriptParser.ParameterListContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="TypeScriptParser.parameterList"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitParameterList([NotNull] TypeScriptParser.ParameterListContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="TypeScriptParser.requiredParameterList"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterRequiredParameterList([NotNull] TypeScriptParser.RequiredParameterListContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="TypeScriptParser.requiredParameterList"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitRequiredParameterList([NotNull] TypeScriptParser.RequiredParameterListContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="TypeScriptParser.parameter"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterParameter([NotNull] TypeScriptParser.ParameterContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="TypeScriptParser.parameter"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitParameter([NotNull] TypeScriptParser.ParameterContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="TypeScriptParser.optionalParameter"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterOptionalParameter([NotNull] TypeScriptParser.OptionalParameterContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="TypeScriptParser.optionalParameter"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitOptionalParameter([NotNull] TypeScriptParser.OptionalParameterContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="TypeScriptParser.restParameter"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterRestParameter([NotNull] TypeScriptParser.RestParameterContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="TypeScriptParser.restParameter"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitRestParameter([NotNull] TypeScriptParser.RestParameterContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="TypeScriptParser.requiredParameter"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterRequiredParameter([NotNull] TypeScriptParser.RequiredParameterContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="TypeScriptParser.requiredParameter"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitRequiredParameter([NotNull] TypeScriptParser.RequiredParameterContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="TypeScriptParser.accessibilityModifier"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterAccessibilityModifier([NotNull] TypeScriptParser.AccessibilityModifierContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="TypeScriptParser.accessibilityModifier"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitAccessibilityModifier([NotNull] TypeScriptParser.AccessibilityModifierContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="TypeScriptParser.identifierOrPattern"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterIdentifierOrPattern([NotNull] TypeScriptParser.IdentifierOrPatternContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="TypeScriptParser.identifierOrPattern"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitIdentifierOrPattern([NotNull] TypeScriptParser.IdentifierOrPatternContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="TypeScriptParser.constructSignature"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterConstructSignature([NotNull] TypeScriptParser.ConstructSignatureContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="TypeScriptParser.constructSignature"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitConstructSignature([NotNull] TypeScriptParser.ConstructSignatureContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="TypeScriptParser.indexSignature"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterIndexSignature([NotNull] TypeScriptParser.IndexSignatureContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="TypeScriptParser.indexSignature"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitIndexSignature([NotNull] TypeScriptParser.IndexSignatureContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="TypeScriptParser.methodSignature"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterMethodSignature([NotNull] TypeScriptParser.MethodSignatureContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="TypeScriptParser.methodSignature"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitMethodSignature([NotNull] TypeScriptParser.MethodSignatureContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="TypeScriptParser.typeAliasDeclaration"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterTypeAliasDeclaration([NotNull] TypeScriptParser.TypeAliasDeclarationContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="TypeScriptParser.typeAliasDeclaration"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitTypeAliasDeclaration([NotNull] TypeScriptParser.TypeAliasDeclarationContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="TypeScriptParser.constructorDeclaration"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterConstructorDeclaration([NotNull] TypeScriptParser.ConstructorDeclarationContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="TypeScriptParser.constructorDeclaration"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitConstructorDeclaration([NotNull] TypeScriptParser.ConstructorDeclarationContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="TypeScriptParser.interfaceDeclaration"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterInterfaceDeclaration([NotNull] TypeScriptParser.InterfaceDeclarationContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="TypeScriptParser.interfaceDeclaration"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitInterfaceDeclaration([NotNull] TypeScriptParser.InterfaceDeclarationContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="TypeScriptParser.interfaceExtendsClause"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterInterfaceExtendsClause([NotNull] TypeScriptParser.InterfaceExtendsClauseContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="TypeScriptParser.interfaceExtendsClause"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitInterfaceExtendsClause([NotNull] TypeScriptParser.InterfaceExtendsClauseContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="TypeScriptParser.classOrInterfaceTypeList"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterClassOrInterfaceTypeList([NotNull] TypeScriptParser.ClassOrInterfaceTypeListContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="TypeScriptParser.classOrInterfaceTypeList"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitClassOrInterfaceTypeList([NotNull] TypeScriptParser.ClassOrInterfaceTypeListContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="TypeScriptParser.enumDeclaration"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterEnumDeclaration([NotNull] TypeScriptParser.EnumDeclarationContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="TypeScriptParser.enumDeclaration"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitEnumDeclaration([NotNull] TypeScriptParser.EnumDeclarationContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="TypeScriptParser.enumBody"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterEnumBody([NotNull] TypeScriptParser.EnumBodyContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="TypeScriptParser.enumBody"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitEnumBody([NotNull] TypeScriptParser.EnumBodyContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="TypeScriptParser.enumMemberList"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterEnumMemberList([NotNull] TypeScriptParser.EnumMemberListContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="TypeScriptParser.enumMemberList"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitEnumMemberList([NotNull] TypeScriptParser.EnumMemberListContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="TypeScriptParser.enumMember"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterEnumMember([NotNull] TypeScriptParser.EnumMemberContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="TypeScriptParser.enumMember"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitEnumMember([NotNull] TypeScriptParser.EnumMemberContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="TypeScriptParser.namespaceDeclaration"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterNamespaceDeclaration([NotNull] TypeScriptParser.NamespaceDeclarationContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="TypeScriptParser.namespaceDeclaration"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitNamespaceDeclaration([NotNull] TypeScriptParser.NamespaceDeclarationContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="TypeScriptParser.namespaceName"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterNamespaceName([NotNull] TypeScriptParser.NamespaceNameContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="TypeScriptParser.namespaceName"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitNamespaceName([NotNull] TypeScriptParser.NamespaceNameContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="TypeScriptParser.importAliasDeclaration"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterImportAliasDeclaration([NotNull] TypeScriptParser.ImportAliasDeclarationContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="TypeScriptParser.importAliasDeclaration"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitImportAliasDeclaration([NotNull] TypeScriptParser.ImportAliasDeclarationContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="TypeScriptParser.decoratorList"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterDecoratorList([NotNull] TypeScriptParser.DecoratorListContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="TypeScriptParser.decoratorList"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitDecoratorList([NotNull] TypeScriptParser.DecoratorListContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="TypeScriptParser.decorator"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterDecorator([NotNull] TypeScriptParser.DecoratorContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="TypeScriptParser.decorator"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitDecorator([NotNull] TypeScriptParser.DecoratorContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="TypeScriptParser.decoratorMemberExpression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterDecoratorMemberExpression([NotNull] TypeScriptParser.DecoratorMemberExpressionContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="TypeScriptParser.decoratorMemberExpression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitDecoratorMemberExpression([NotNull] TypeScriptParser.DecoratorMemberExpressionContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="TypeScriptParser.decoratorCallExpression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterDecoratorCallExpression([NotNull] TypeScriptParser.DecoratorCallExpressionContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="TypeScriptParser.decoratorCallExpression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitDecoratorCallExpression([NotNull] TypeScriptParser.DecoratorCallExpressionContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="TypeScriptParser.program"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterProgram([NotNull] TypeScriptParser.ProgramContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="TypeScriptParser.program"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitProgram([NotNull] TypeScriptParser.ProgramContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="TypeScriptParser.sourceElement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterSourceElement([NotNull] TypeScriptParser.SourceElementContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="TypeScriptParser.sourceElement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitSourceElement([NotNull] TypeScriptParser.SourceElementContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="TypeScriptParser.statement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterStatement([NotNull] TypeScriptParser.StatementContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="TypeScriptParser.statement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitStatement([NotNull] TypeScriptParser.StatementContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="TypeScriptParser.block"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterBlock([NotNull] TypeScriptParser.BlockContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="TypeScriptParser.block"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitBlock([NotNull] TypeScriptParser.BlockContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="TypeScriptParser.statementList"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterStatementList([NotNull] TypeScriptParser.StatementListContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="TypeScriptParser.statementList"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitStatementList([NotNull] TypeScriptParser.StatementListContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="TypeScriptParser.abstractDeclaration"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterAbstractDeclaration([NotNull] TypeScriptParser.AbstractDeclarationContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="TypeScriptParser.abstractDeclaration"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitAbstractDeclaration([NotNull] TypeScriptParser.AbstractDeclarationContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="TypeScriptParser.importStatement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterImportStatement([NotNull] TypeScriptParser.ImportStatementContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="TypeScriptParser.importStatement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitImportStatement([NotNull] TypeScriptParser.ImportStatementContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="TypeScriptParser.fromBlock"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterFromBlock([NotNull] TypeScriptParser.FromBlockContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="TypeScriptParser.fromBlock"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitFromBlock([NotNull] TypeScriptParser.FromBlockContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="TypeScriptParser.multipleImportStatement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterMultipleImportStatement([NotNull] TypeScriptParser.MultipleImportStatementContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="TypeScriptParser.multipleImportStatement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitMultipleImportStatement([NotNull] TypeScriptParser.MultipleImportStatementContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="TypeScriptParser.exportStatement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterExportStatement([NotNull] TypeScriptParser.ExportStatementContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="TypeScriptParser.exportStatement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitExportStatement([NotNull] TypeScriptParser.ExportStatementContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="TypeScriptParser.variableStatement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterVariableStatement([NotNull] TypeScriptParser.VariableStatementContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="TypeScriptParser.variableStatement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitVariableStatement([NotNull] TypeScriptParser.VariableStatementContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="TypeScriptParser.variableDeclarationList"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterVariableDeclarationList([NotNull] TypeScriptParser.VariableDeclarationListContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="TypeScriptParser.variableDeclarationList"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitVariableDeclarationList([NotNull] TypeScriptParser.VariableDeclarationListContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="TypeScriptParser.variableDeclaration"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterVariableDeclaration([NotNull] TypeScriptParser.VariableDeclarationContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="TypeScriptParser.variableDeclaration"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitVariableDeclaration([NotNull] TypeScriptParser.VariableDeclarationContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="TypeScriptParser.emptyStatement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterEmptyStatement([NotNull] TypeScriptParser.EmptyStatementContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="TypeScriptParser.emptyStatement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitEmptyStatement([NotNull] TypeScriptParser.EmptyStatementContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="TypeScriptParser.expressionStatement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterExpressionStatement([NotNull] TypeScriptParser.ExpressionStatementContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="TypeScriptParser.expressionStatement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitExpressionStatement([NotNull] TypeScriptParser.ExpressionStatementContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="TypeScriptParser.ifStatement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterIfStatement([NotNull] TypeScriptParser.IfStatementContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="TypeScriptParser.ifStatement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitIfStatement([NotNull] TypeScriptParser.IfStatementContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>DoStatement</c>
	/// labeled alternative in <see cref="TypeScriptParser.iterationStatement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterDoStatement([NotNull] TypeScriptParser.DoStatementContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>DoStatement</c>
	/// labeled alternative in <see cref="TypeScriptParser.iterationStatement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitDoStatement([NotNull] TypeScriptParser.DoStatementContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>WhileStatement</c>
	/// labeled alternative in <see cref="TypeScriptParser.iterationStatement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterWhileStatement([NotNull] TypeScriptParser.WhileStatementContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>WhileStatement</c>
	/// labeled alternative in <see cref="TypeScriptParser.iterationStatement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitWhileStatement([NotNull] TypeScriptParser.WhileStatementContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>ForStatement</c>
	/// labeled alternative in <see cref="TypeScriptParser.iterationStatement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterForStatement([NotNull] TypeScriptParser.ForStatementContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>ForStatement</c>
	/// labeled alternative in <see cref="TypeScriptParser.iterationStatement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitForStatement([NotNull] TypeScriptParser.ForStatementContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>ForVarStatement</c>
	/// labeled alternative in <see cref="TypeScriptParser.iterationStatement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterForVarStatement([NotNull] TypeScriptParser.ForVarStatementContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>ForVarStatement</c>
	/// labeled alternative in <see cref="TypeScriptParser.iterationStatement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitForVarStatement([NotNull] TypeScriptParser.ForVarStatementContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>ForInStatement</c>
	/// labeled alternative in <see cref="TypeScriptParser.iterationStatement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterForInStatement([NotNull] TypeScriptParser.ForInStatementContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>ForInStatement</c>
	/// labeled alternative in <see cref="TypeScriptParser.iterationStatement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitForInStatement([NotNull] TypeScriptParser.ForInStatementContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>ForVarInStatement</c>
	/// labeled alternative in <see cref="TypeScriptParser.iterationStatement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterForVarInStatement([NotNull] TypeScriptParser.ForVarInStatementContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>ForVarInStatement</c>
	/// labeled alternative in <see cref="TypeScriptParser.iterationStatement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitForVarInStatement([NotNull] TypeScriptParser.ForVarInStatementContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="TypeScriptParser.varModifier"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterVarModifier([NotNull] TypeScriptParser.VarModifierContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="TypeScriptParser.varModifier"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitVarModifier([NotNull] TypeScriptParser.VarModifierContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="TypeScriptParser.continueStatement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterContinueStatement([NotNull] TypeScriptParser.ContinueStatementContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="TypeScriptParser.continueStatement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitContinueStatement([NotNull] TypeScriptParser.ContinueStatementContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="TypeScriptParser.breakStatement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterBreakStatement([NotNull] TypeScriptParser.BreakStatementContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="TypeScriptParser.breakStatement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitBreakStatement([NotNull] TypeScriptParser.BreakStatementContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="TypeScriptParser.returnStatement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterReturnStatement([NotNull] TypeScriptParser.ReturnStatementContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="TypeScriptParser.returnStatement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitReturnStatement([NotNull] TypeScriptParser.ReturnStatementContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="TypeScriptParser.yieldStatement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterYieldStatement([NotNull] TypeScriptParser.YieldStatementContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="TypeScriptParser.yieldStatement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitYieldStatement([NotNull] TypeScriptParser.YieldStatementContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="TypeScriptParser.withStatement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterWithStatement([NotNull] TypeScriptParser.WithStatementContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="TypeScriptParser.withStatement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitWithStatement([NotNull] TypeScriptParser.WithStatementContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="TypeScriptParser.switchStatement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterSwitchStatement([NotNull] TypeScriptParser.SwitchStatementContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="TypeScriptParser.switchStatement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitSwitchStatement([NotNull] TypeScriptParser.SwitchStatementContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="TypeScriptParser.caseBlock"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterCaseBlock([NotNull] TypeScriptParser.CaseBlockContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="TypeScriptParser.caseBlock"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitCaseBlock([NotNull] TypeScriptParser.CaseBlockContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="TypeScriptParser.caseClauses"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterCaseClauses([NotNull] TypeScriptParser.CaseClausesContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="TypeScriptParser.caseClauses"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitCaseClauses([NotNull] TypeScriptParser.CaseClausesContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="TypeScriptParser.caseClause"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterCaseClause([NotNull] TypeScriptParser.CaseClauseContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="TypeScriptParser.caseClause"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitCaseClause([NotNull] TypeScriptParser.CaseClauseContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="TypeScriptParser.defaultClause"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterDefaultClause([NotNull] TypeScriptParser.DefaultClauseContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="TypeScriptParser.defaultClause"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitDefaultClause([NotNull] TypeScriptParser.DefaultClauseContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="TypeScriptParser.labelledStatement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterLabelledStatement([NotNull] TypeScriptParser.LabelledStatementContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="TypeScriptParser.labelledStatement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitLabelledStatement([NotNull] TypeScriptParser.LabelledStatementContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="TypeScriptParser.throwStatement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterThrowStatement([NotNull] TypeScriptParser.ThrowStatementContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="TypeScriptParser.throwStatement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitThrowStatement([NotNull] TypeScriptParser.ThrowStatementContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="TypeScriptParser.tryStatement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterTryStatement([NotNull] TypeScriptParser.TryStatementContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="TypeScriptParser.tryStatement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitTryStatement([NotNull] TypeScriptParser.TryStatementContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="TypeScriptParser.catchProduction"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterCatchProduction([NotNull] TypeScriptParser.CatchProductionContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="TypeScriptParser.catchProduction"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitCatchProduction([NotNull] TypeScriptParser.CatchProductionContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="TypeScriptParser.finallyProduction"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterFinallyProduction([NotNull] TypeScriptParser.FinallyProductionContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="TypeScriptParser.finallyProduction"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitFinallyProduction([NotNull] TypeScriptParser.FinallyProductionContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="TypeScriptParser.debuggerStatement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterDebuggerStatement([NotNull] TypeScriptParser.DebuggerStatementContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="TypeScriptParser.debuggerStatement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitDebuggerStatement([NotNull] TypeScriptParser.DebuggerStatementContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="TypeScriptParser.functionDeclaration"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterFunctionDeclaration([NotNull] TypeScriptParser.FunctionDeclarationContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="TypeScriptParser.functionDeclaration"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitFunctionDeclaration([NotNull] TypeScriptParser.FunctionDeclarationContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="TypeScriptParser.classDeclaration"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterClassDeclaration([NotNull] TypeScriptParser.ClassDeclarationContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="TypeScriptParser.classDeclaration"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitClassDeclaration([NotNull] TypeScriptParser.ClassDeclarationContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="TypeScriptParser.classHeritage"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterClassHeritage([NotNull] TypeScriptParser.ClassHeritageContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="TypeScriptParser.classHeritage"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitClassHeritage([NotNull] TypeScriptParser.ClassHeritageContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="TypeScriptParser.classTail"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterClassTail([NotNull] TypeScriptParser.ClassTailContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="TypeScriptParser.classTail"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitClassTail([NotNull] TypeScriptParser.ClassTailContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="TypeScriptParser.classExtendsClause"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterClassExtendsClause([NotNull] TypeScriptParser.ClassExtendsClauseContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="TypeScriptParser.classExtendsClause"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitClassExtendsClause([NotNull] TypeScriptParser.ClassExtendsClauseContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="TypeScriptParser.implementsClause"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterImplementsClause([NotNull] TypeScriptParser.ImplementsClauseContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="TypeScriptParser.implementsClause"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitImplementsClause([NotNull] TypeScriptParser.ImplementsClauseContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="TypeScriptParser.classElement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterClassElement([NotNull] TypeScriptParser.ClassElementContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="TypeScriptParser.classElement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitClassElement([NotNull] TypeScriptParser.ClassElementContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>PropertyDeclarationExpression</c>
	/// labeled alternative in <see cref="TypeScriptParser.propertyMemberDeclaration"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterPropertyDeclarationExpression([NotNull] TypeScriptParser.PropertyDeclarationExpressionContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>PropertyDeclarationExpression</c>
	/// labeled alternative in <see cref="TypeScriptParser.propertyMemberDeclaration"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitPropertyDeclarationExpression([NotNull] TypeScriptParser.PropertyDeclarationExpressionContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>MethodDeclarationExpression</c>
	/// labeled alternative in <see cref="TypeScriptParser.propertyMemberDeclaration"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterMethodDeclarationExpression([NotNull] TypeScriptParser.MethodDeclarationExpressionContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>MethodDeclarationExpression</c>
	/// labeled alternative in <see cref="TypeScriptParser.propertyMemberDeclaration"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitMethodDeclarationExpression([NotNull] TypeScriptParser.MethodDeclarationExpressionContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>GetterSetterDeclarationExpression</c>
	/// labeled alternative in <see cref="TypeScriptParser.propertyMemberDeclaration"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterGetterSetterDeclarationExpression([NotNull] TypeScriptParser.GetterSetterDeclarationExpressionContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>GetterSetterDeclarationExpression</c>
	/// labeled alternative in <see cref="TypeScriptParser.propertyMemberDeclaration"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitGetterSetterDeclarationExpression([NotNull] TypeScriptParser.GetterSetterDeclarationExpressionContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>AbstractMemberDeclaration</c>
	/// labeled alternative in <see cref="TypeScriptParser.propertyMemberDeclaration"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterAbstractMemberDeclaration([NotNull] TypeScriptParser.AbstractMemberDeclarationContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>AbstractMemberDeclaration</c>
	/// labeled alternative in <see cref="TypeScriptParser.propertyMemberDeclaration"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitAbstractMemberDeclaration([NotNull] TypeScriptParser.AbstractMemberDeclarationContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="TypeScriptParser.propertyMemberBase"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterPropertyMemberBase([NotNull] TypeScriptParser.PropertyMemberBaseContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="TypeScriptParser.propertyMemberBase"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitPropertyMemberBase([NotNull] TypeScriptParser.PropertyMemberBaseContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="TypeScriptParser.indexMemberDeclaration"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterIndexMemberDeclaration([NotNull] TypeScriptParser.IndexMemberDeclarationContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="TypeScriptParser.indexMemberDeclaration"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitIndexMemberDeclaration([NotNull] TypeScriptParser.IndexMemberDeclarationContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="TypeScriptParser.generatorMethod"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterGeneratorMethod([NotNull] TypeScriptParser.GeneratorMethodContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="TypeScriptParser.generatorMethod"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitGeneratorMethod([NotNull] TypeScriptParser.GeneratorMethodContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="TypeScriptParser.generatorFunctionDeclaration"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterGeneratorFunctionDeclaration([NotNull] TypeScriptParser.GeneratorFunctionDeclarationContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="TypeScriptParser.generatorFunctionDeclaration"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitGeneratorFunctionDeclaration([NotNull] TypeScriptParser.GeneratorFunctionDeclarationContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="TypeScriptParser.generatorBlock"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterGeneratorBlock([NotNull] TypeScriptParser.GeneratorBlockContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="TypeScriptParser.generatorBlock"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitGeneratorBlock([NotNull] TypeScriptParser.GeneratorBlockContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="TypeScriptParser.generatorDefinition"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterGeneratorDefinition([NotNull] TypeScriptParser.GeneratorDefinitionContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="TypeScriptParser.generatorDefinition"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitGeneratorDefinition([NotNull] TypeScriptParser.GeneratorDefinitionContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="TypeScriptParser.iteratorBlock"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterIteratorBlock([NotNull] TypeScriptParser.IteratorBlockContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="TypeScriptParser.iteratorBlock"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitIteratorBlock([NotNull] TypeScriptParser.IteratorBlockContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="TypeScriptParser.iteratorDefinition"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterIteratorDefinition([NotNull] TypeScriptParser.IteratorDefinitionContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="TypeScriptParser.iteratorDefinition"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitIteratorDefinition([NotNull] TypeScriptParser.IteratorDefinitionContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="TypeScriptParser.formalParameterList"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterFormalParameterList([NotNull] TypeScriptParser.FormalParameterListContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="TypeScriptParser.formalParameterList"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitFormalParameterList([NotNull] TypeScriptParser.FormalParameterListContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="TypeScriptParser.formalParameterArg"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterFormalParameterArg([NotNull] TypeScriptParser.FormalParameterArgContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="TypeScriptParser.formalParameterArg"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitFormalParameterArg([NotNull] TypeScriptParser.FormalParameterArgContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="TypeScriptParser.lastFormalParameterArg"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterLastFormalParameterArg([NotNull] TypeScriptParser.LastFormalParameterArgContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="TypeScriptParser.lastFormalParameterArg"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitLastFormalParameterArg([NotNull] TypeScriptParser.LastFormalParameterArgContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="TypeScriptParser.functionBody"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterFunctionBody([NotNull] TypeScriptParser.FunctionBodyContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="TypeScriptParser.functionBody"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitFunctionBody([NotNull] TypeScriptParser.FunctionBodyContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="TypeScriptParser.sourceElements"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterSourceElements([NotNull] TypeScriptParser.SourceElementsContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="TypeScriptParser.sourceElements"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitSourceElements([NotNull] TypeScriptParser.SourceElementsContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="TypeScriptParser.arrayLiteral"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterArrayLiteral([NotNull] TypeScriptParser.ArrayLiteralContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="TypeScriptParser.arrayLiteral"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitArrayLiteral([NotNull] TypeScriptParser.ArrayLiteralContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="TypeScriptParser.elementList"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterElementList([NotNull] TypeScriptParser.ElementListContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="TypeScriptParser.elementList"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitElementList([NotNull] TypeScriptParser.ElementListContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="TypeScriptParser.arrayElement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterArrayElement([NotNull] TypeScriptParser.ArrayElementContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="TypeScriptParser.arrayElement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitArrayElement([NotNull] TypeScriptParser.ArrayElementContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="TypeScriptParser.objectLiteral"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterObjectLiteral([NotNull] TypeScriptParser.ObjectLiteralContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="TypeScriptParser.objectLiteral"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitObjectLiteral([NotNull] TypeScriptParser.ObjectLiteralContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>PropertyExpressionAssignment</c>
	/// labeled alternative in <see cref="TypeScriptParser.propertyAssignment"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterPropertyExpressionAssignment([NotNull] TypeScriptParser.PropertyExpressionAssignmentContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>PropertyExpressionAssignment</c>
	/// labeled alternative in <see cref="TypeScriptParser.propertyAssignment"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitPropertyExpressionAssignment([NotNull] TypeScriptParser.PropertyExpressionAssignmentContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>ComputedPropertyExpressionAssignment</c>
	/// labeled alternative in <see cref="TypeScriptParser.propertyAssignment"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterComputedPropertyExpressionAssignment([NotNull] TypeScriptParser.ComputedPropertyExpressionAssignmentContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>ComputedPropertyExpressionAssignment</c>
	/// labeled alternative in <see cref="TypeScriptParser.propertyAssignment"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitComputedPropertyExpressionAssignment([NotNull] TypeScriptParser.ComputedPropertyExpressionAssignmentContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>PropertyGetter</c>
	/// labeled alternative in <see cref="TypeScriptParser.propertyAssignment"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterPropertyGetter([NotNull] TypeScriptParser.PropertyGetterContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>PropertyGetter</c>
	/// labeled alternative in <see cref="TypeScriptParser.propertyAssignment"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitPropertyGetter([NotNull] TypeScriptParser.PropertyGetterContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>PropertySetter</c>
	/// labeled alternative in <see cref="TypeScriptParser.propertyAssignment"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterPropertySetter([NotNull] TypeScriptParser.PropertySetterContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>PropertySetter</c>
	/// labeled alternative in <see cref="TypeScriptParser.propertyAssignment"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitPropertySetter([NotNull] TypeScriptParser.PropertySetterContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>MethodProperty</c>
	/// labeled alternative in <see cref="TypeScriptParser.propertyAssignment"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterMethodProperty([NotNull] TypeScriptParser.MethodPropertyContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>MethodProperty</c>
	/// labeled alternative in <see cref="TypeScriptParser.propertyAssignment"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitMethodProperty([NotNull] TypeScriptParser.MethodPropertyContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>PropertyShorthand</c>
	/// labeled alternative in <see cref="TypeScriptParser.propertyAssignment"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterPropertyShorthand([NotNull] TypeScriptParser.PropertyShorthandContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>PropertyShorthand</c>
	/// labeled alternative in <see cref="TypeScriptParser.propertyAssignment"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitPropertyShorthand([NotNull] TypeScriptParser.PropertyShorthandContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>RestParameterInObject</c>
	/// labeled alternative in <see cref="TypeScriptParser.propertyAssignment"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterRestParameterInObject([NotNull] TypeScriptParser.RestParameterInObjectContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>RestParameterInObject</c>
	/// labeled alternative in <see cref="TypeScriptParser.propertyAssignment"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitRestParameterInObject([NotNull] TypeScriptParser.RestParameterInObjectContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="TypeScriptParser.getAccessor"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterGetAccessor([NotNull] TypeScriptParser.GetAccessorContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="TypeScriptParser.getAccessor"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitGetAccessor([NotNull] TypeScriptParser.GetAccessorContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="TypeScriptParser.setAccessor"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterSetAccessor([NotNull] TypeScriptParser.SetAccessorContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="TypeScriptParser.setAccessor"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitSetAccessor([NotNull] TypeScriptParser.SetAccessorContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="TypeScriptParser.propertyName"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterPropertyName([NotNull] TypeScriptParser.PropertyNameContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="TypeScriptParser.propertyName"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitPropertyName([NotNull] TypeScriptParser.PropertyNameContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="TypeScriptParser.arguments"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterArguments([NotNull] TypeScriptParser.ArgumentsContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="TypeScriptParser.arguments"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitArguments([NotNull] TypeScriptParser.ArgumentsContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="TypeScriptParser.argumentList"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterArgumentList([NotNull] TypeScriptParser.ArgumentListContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="TypeScriptParser.argumentList"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitArgumentList([NotNull] TypeScriptParser.ArgumentListContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="TypeScriptParser.argument"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterArgument([NotNull] TypeScriptParser.ArgumentContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="TypeScriptParser.argument"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitArgument([NotNull] TypeScriptParser.ArgumentContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="TypeScriptParser.expressionSequence"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterExpressionSequence([NotNull] TypeScriptParser.ExpressionSequenceContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="TypeScriptParser.expressionSequence"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitExpressionSequence([NotNull] TypeScriptParser.ExpressionSequenceContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="TypeScriptParser.functionExpressionDeclaration"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterFunctionExpressionDeclaration([NotNull] TypeScriptParser.FunctionExpressionDeclarationContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="TypeScriptParser.functionExpressionDeclaration"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitFunctionExpressionDeclaration([NotNull] TypeScriptParser.FunctionExpressionDeclarationContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>TemplateStringExpression</c>
	/// labeled alternative in <see cref="TypeScriptParser.singleExpression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterTemplateStringExpression([NotNull] TypeScriptParser.TemplateStringExpressionContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>TemplateStringExpression</c>
	/// labeled alternative in <see cref="TypeScriptParser.singleExpression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitTemplateStringExpression([NotNull] TypeScriptParser.TemplateStringExpressionContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>TernaryExpression</c>
	/// labeled alternative in <see cref="TypeScriptParser.singleExpression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterTernaryExpression([NotNull] TypeScriptParser.TernaryExpressionContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>TernaryExpression</c>
	/// labeled alternative in <see cref="TypeScriptParser.singleExpression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitTernaryExpression([NotNull] TypeScriptParser.TernaryExpressionContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>LogicalAndExpression</c>
	/// labeled alternative in <see cref="TypeScriptParser.singleExpression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterLogicalAndExpression([NotNull] TypeScriptParser.LogicalAndExpressionContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>LogicalAndExpression</c>
	/// labeled alternative in <see cref="TypeScriptParser.singleExpression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitLogicalAndExpression([NotNull] TypeScriptParser.LogicalAndExpressionContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>GeneratorsExpression</c>
	/// labeled alternative in <see cref="TypeScriptParser.singleExpression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterGeneratorsExpression([NotNull] TypeScriptParser.GeneratorsExpressionContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>GeneratorsExpression</c>
	/// labeled alternative in <see cref="TypeScriptParser.singleExpression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitGeneratorsExpression([NotNull] TypeScriptParser.GeneratorsExpressionContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>PreIncrementExpression</c>
	/// labeled alternative in <see cref="TypeScriptParser.singleExpression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterPreIncrementExpression([NotNull] TypeScriptParser.PreIncrementExpressionContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>PreIncrementExpression</c>
	/// labeled alternative in <see cref="TypeScriptParser.singleExpression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitPreIncrementExpression([NotNull] TypeScriptParser.PreIncrementExpressionContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>ObjectLiteralExpression</c>
	/// labeled alternative in <see cref="TypeScriptParser.singleExpression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterObjectLiteralExpression([NotNull] TypeScriptParser.ObjectLiteralExpressionContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>ObjectLiteralExpression</c>
	/// labeled alternative in <see cref="TypeScriptParser.singleExpression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitObjectLiteralExpression([NotNull] TypeScriptParser.ObjectLiteralExpressionContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>InExpression</c>
	/// labeled alternative in <see cref="TypeScriptParser.singleExpression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterInExpression([NotNull] TypeScriptParser.InExpressionContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>InExpression</c>
	/// labeled alternative in <see cref="TypeScriptParser.singleExpression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitInExpression([NotNull] TypeScriptParser.InExpressionContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>LogicalOrExpression</c>
	/// labeled alternative in <see cref="TypeScriptParser.singleExpression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterLogicalOrExpression([NotNull] TypeScriptParser.LogicalOrExpressionContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>LogicalOrExpression</c>
	/// labeled alternative in <see cref="TypeScriptParser.singleExpression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitLogicalOrExpression([NotNull] TypeScriptParser.LogicalOrExpressionContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>GenericTypes</c>
	/// labeled alternative in <see cref="TypeScriptParser.singleExpression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterGenericTypes([NotNull] TypeScriptParser.GenericTypesContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>GenericTypes</c>
	/// labeled alternative in <see cref="TypeScriptParser.singleExpression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitGenericTypes([NotNull] TypeScriptParser.GenericTypesContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>NotExpression</c>
	/// labeled alternative in <see cref="TypeScriptParser.singleExpression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterNotExpression([NotNull] TypeScriptParser.NotExpressionContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>NotExpression</c>
	/// labeled alternative in <see cref="TypeScriptParser.singleExpression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitNotExpression([NotNull] TypeScriptParser.NotExpressionContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>PreDecreaseExpression</c>
	/// labeled alternative in <see cref="TypeScriptParser.singleExpression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterPreDecreaseExpression([NotNull] TypeScriptParser.PreDecreaseExpressionContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>PreDecreaseExpression</c>
	/// labeled alternative in <see cref="TypeScriptParser.singleExpression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitPreDecreaseExpression([NotNull] TypeScriptParser.PreDecreaseExpressionContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>ArgumentsExpression</c>
	/// labeled alternative in <see cref="TypeScriptParser.singleExpression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterArgumentsExpression([NotNull] TypeScriptParser.ArgumentsExpressionContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>ArgumentsExpression</c>
	/// labeled alternative in <see cref="TypeScriptParser.singleExpression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitArgumentsExpression([NotNull] TypeScriptParser.ArgumentsExpressionContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>ThisExpression</c>
	/// labeled alternative in <see cref="TypeScriptParser.singleExpression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterThisExpression([NotNull] TypeScriptParser.ThisExpressionContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>ThisExpression</c>
	/// labeled alternative in <see cref="TypeScriptParser.singleExpression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitThisExpression([NotNull] TypeScriptParser.ThisExpressionContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>FunctionExpression</c>
	/// labeled alternative in <see cref="TypeScriptParser.singleExpression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterFunctionExpression([NotNull] TypeScriptParser.FunctionExpressionContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>FunctionExpression</c>
	/// labeled alternative in <see cref="TypeScriptParser.singleExpression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitFunctionExpression([NotNull] TypeScriptParser.FunctionExpressionContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>UnaryMinusExpression</c>
	/// labeled alternative in <see cref="TypeScriptParser.singleExpression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterUnaryMinusExpression([NotNull] TypeScriptParser.UnaryMinusExpressionContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>UnaryMinusExpression</c>
	/// labeled alternative in <see cref="TypeScriptParser.singleExpression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitUnaryMinusExpression([NotNull] TypeScriptParser.UnaryMinusExpressionContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>AssignmentExpression</c>
	/// labeled alternative in <see cref="TypeScriptParser.singleExpression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterAssignmentExpression([NotNull] TypeScriptParser.AssignmentExpressionContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>AssignmentExpression</c>
	/// labeled alternative in <see cref="TypeScriptParser.singleExpression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitAssignmentExpression([NotNull] TypeScriptParser.AssignmentExpressionContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>PostDecreaseExpression</c>
	/// labeled alternative in <see cref="TypeScriptParser.singleExpression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterPostDecreaseExpression([NotNull] TypeScriptParser.PostDecreaseExpressionContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>PostDecreaseExpression</c>
	/// labeled alternative in <see cref="TypeScriptParser.singleExpression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitPostDecreaseExpression([NotNull] TypeScriptParser.PostDecreaseExpressionContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>TypeofExpression</c>
	/// labeled alternative in <see cref="TypeScriptParser.singleExpression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterTypeofExpression([NotNull] TypeScriptParser.TypeofExpressionContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>TypeofExpression</c>
	/// labeled alternative in <see cref="TypeScriptParser.singleExpression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitTypeofExpression([NotNull] TypeScriptParser.TypeofExpressionContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>InstanceofExpression</c>
	/// labeled alternative in <see cref="TypeScriptParser.singleExpression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterInstanceofExpression([NotNull] TypeScriptParser.InstanceofExpressionContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>InstanceofExpression</c>
	/// labeled alternative in <see cref="TypeScriptParser.singleExpression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitInstanceofExpression([NotNull] TypeScriptParser.InstanceofExpressionContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>UnaryPlusExpression</c>
	/// labeled alternative in <see cref="TypeScriptParser.singleExpression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterUnaryPlusExpression([NotNull] TypeScriptParser.UnaryPlusExpressionContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>UnaryPlusExpression</c>
	/// labeled alternative in <see cref="TypeScriptParser.singleExpression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitUnaryPlusExpression([NotNull] TypeScriptParser.UnaryPlusExpressionContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>DeleteExpression</c>
	/// labeled alternative in <see cref="TypeScriptParser.singleExpression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterDeleteExpression([NotNull] TypeScriptParser.DeleteExpressionContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>DeleteExpression</c>
	/// labeled alternative in <see cref="TypeScriptParser.singleExpression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitDeleteExpression([NotNull] TypeScriptParser.DeleteExpressionContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>GeneratorsFunctionExpression</c>
	/// labeled alternative in <see cref="TypeScriptParser.singleExpression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterGeneratorsFunctionExpression([NotNull] TypeScriptParser.GeneratorsFunctionExpressionContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>GeneratorsFunctionExpression</c>
	/// labeled alternative in <see cref="TypeScriptParser.singleExpression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitGeneratorsFunctionExpression([NotNull] TypeScriptParser.GeneratorsFunctionExpressionContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>ArrowFunctionExpression</c>
	/// labeled alternative in <see cref="TypeScriptParser.singleExpression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterArrowFunctionExpression([NotNull] TypeScriptParser.ArrowFunctionExpressionContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>ArrowFunctionExpression</c>
	/// labeled alternative in <see cref="TypeScriptParser.singleExpression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitArrowFunctionExpression([NotNull] TypeScriptParser.ArrowFunctionExpressionContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>IteratorsExpression</c>
	/// labeled alternative in <see cref="TypeScriptParser.singleExpression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterIteratorsExpression([NotNull] TypeScriptParser.IteratorsExpressionContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>IteratorsExpression</c>
	/// labeled alternative in <see cref="TypeScriptParser.singleExpression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitIteratorsExpression([NotNull] TypeScriptParser.IteratorsExpressionContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>EqualityExpression</c>
	/// labeled alternative in <see cref="TypeScriptParser.singleExpression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterEqualityExpression([NotNull] TypeScriptParser.EqualityExpressionContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>EqualityExpression</c>
	/// labeled alternative in <see cref="TypeScriptParser.singleExpression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitEqualityExpression([NotNull] TypeScriptParser.EqualityExpressionContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>BitXOrExpression</c>
	/// labeled alternative in <see cref="TypeScriptParser.singleExpression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterBitXOrExpression([NotNull] TypeScriptParser.BitXOrExpressionContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>BitXOrExpression</c>
	/// labeled alternative in <see cref="TypeScriptParser.singleExpression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitBitXOrExpression([NotNull] TypeScriptParser.BitXOrExpressionContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>CastAsExpression</c>
	/// labeled alternative in <see cref="TypeScriptParser.singleExpression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterCastAsExpression([NotNull] TypeScriptParser.CastAsExpressionContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>CastAsExpression</c>
	/// labeled alternative in <see cref="TypeScriptParser.singleExpression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitCastAsExpression([NotNull] TypeScriptParser.CastAsExpressionContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>SuperExpression</c>
	/// labeled alternative in <see cref="TypeScriptParser.singleExpression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterSuperExpression([NotNull] TypeScriptParser.SuperExpressionContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>SuperExpression</c>
	/// labeled alternative in <see cref="TypeScriptParser.singleExpression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitSuperExpression([NotNull] TypeScriptParser.SuperExpressionContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>MultiplicativeExpression</c>
	/// labeled alternative in <see cref="TypeScriptParser.singleExpression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterMultiplicativeExpression([NotNull] TypeScriptParser.MultiplicativeExpressionContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>MultiplicativeExpression</c>
	/// labeled alternative in <see cref="TypeScriptParser.singleExpression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitMultiplicativeExpression([NotNull] TypeScriptParser.MultiplicativeExpressionContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>BitShiftExpression</c>
	/// labeled alternative in <see cref="TypeScriptParser.singleExpression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterBitShiftExpression([NotNull] TypeScriptParser.BitShiftExpressionContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>BitShiftExpression</c>
	/// labeled alternative in <see cref="TypeScriptParser.singleExpression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitBitShiftExpression([NotNull] TypeScriptParser.BitShiftExpressionContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>ParenthesizedExpression</c>
	/// labeled alternative in <see cref="TypeScriptParser.singleExpression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterParenthesizedExpression([NotNull] TypeScriptParser.ParenthesizedExpressionContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>ParenthesizedExpression</c>
	/// labeled alternative in <see cref="TypeScriptParser.singleExpression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitParenthesizedExpression([NotNull] TypeScriptParser.ParenthesizedExpressionContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>AdditiveExpression</c>
	/// labeled alternative in <see cref="TypeScriptParser.singleExpression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterAdditiveExpression([NotNull] TypeScriptParser.AdditiveExpressionContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>AdditiveExpression</c>
	/// labeled alternative in <see cref="TypeScriptParser.singleExpression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitAdditiveExpression([NotNull] TypeScriptParser.AdditiveExpressionContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>RelationalExpression</c>
	/// labeled alternative in <see cref="TypeScriptParser.singleExpression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterRelationalExpression([NotNull] TypeScriptParser.RelationalExpressionContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>RelationalExpression</c>
	/// labeled alternative in <see cref="TypeScriptParser.singleExpression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitRelationalExpression([NotNull] TypeScriptParser.RelationalExpressionContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>PostIncrementExpression</c>
	/// labeled alternative in <see cref="TypeScriptParser.singleExpression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterPostIncrementExpression([NotNull] TypeScriptParser.PostIncrementExpressionContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>PostIncrementExpression</c>
	/// labeled alternative in <see cref="TypeScriptParser.singleExpression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitPostIncrementExpression([NotNull] TypeScriptParser.PostIncrementExpressionContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>YieldExpression</c>
	/// labeled alternative in <see cref="TypeScriptParser.singleExpression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterYieldExpression([NotNull] TypeScriptParser.YieldExpressionContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>YieldExpression</c>
	/// labeled alternative in <see cref="TypeScriptParser.singleExpression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitYieldExpression([NotNull] TypeScriptParser.YieldExpressionContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>BitNotExpression</c>
	/// labeled alternative in <see cref="TypeScriptParser.singleExpression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterBitNotExpression([NotNull] TypeScriptParser.BitNotExpressionContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>BitNotExpression</c>
	/// labeled alternative in <see cref="TypeScriptParser.singleExpression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitBitNotExpression([NotNull] TypeScriptParser.BitNotExpressionContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>NewExpression</c>
	/// labeled alternative in <see cref="TypeScriptParser.singleExpression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterNewExpression([NotNull] TypeScriptParser.NewExpressionContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>NewExpression</c>
	/// labeled alternative in <see cref="TypeScriptParser.singleExpression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitNewExpression([NotNull] TypeScriptParser.NewExpressionContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>LiteralExpression</c>
	/// labeled alternative in <see cref="TypeScriptParser.singleExpression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterLiteralExpression([NotNull] TypeScriptParser.LiteralExpressionContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>LiteralExpression</c>
	/// labeled alternative in <see cref="TypeScriptParser.singleExpression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitLiteralExpression([NotNull] TypeScriptParser.LiteralExpressionContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>ArrayLiteralExpression</c>
	/// labeled alternative in <see cref="TypeScriptParser.singleExpression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterArrayLiteralExpression([NotNull] TypeScriptParser.ArrayLiteralExpressionContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>ArrayLiteralExpression</c>
	/// labeled alternative in <see cref="TypeScriptParser.singleExpression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitArrayLiteralExpression([NotNull] TypeScriptParser.ArrayLiteralExpressionContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>MemberDotExpression</c>
	/// labeled alternative in <see cref="TypeScriptParser.singleExpression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterMemberDotExpression([NotNull] TypeScriptParser.MemberDotExpressionContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>MemberDotExpression</c>
	/// labeled alternative in <see cref="TypeScriptParser.singleExpression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitMemberDotExpression([NotNull] TypeScriptParser.MemberDotExpressionContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>ClassExpression</c>
	/// labeled alternative in <see cref="TypeScriptParser.singleExpression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterClassExpression([NotNull] TypeScriptParser.ClassExpressionContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>ClassExpression</c>
	/// labeled alternative in <see cref="TypeScriptParser.singleExpression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitClassExpression([NotNull] TypeScriptParser.ClassExpressionContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>MemberIndexExpression</c>
	/// labeled alternative in <see cref="TypeScriptParser.singleExpression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterMemberIndexExpression([NotNull] TypeScriptParser.MemberIndexExpressionContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>MemberIndexExpression</c>
	/// labeled alternative in <see cref="TypeScriptParser.singleExpression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitMemberIndexExpression([NotNull] TypeScriptParser.MemberIndexExpressionContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>IdentifierExpression</c>
	/// labeled alternative in <see cref="TypeScriptParser.singleExpression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterIdentifierExpression([NotNull] TypeScriptParser.IdentifierExpressionContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>IdentifierExpression</c>
	/// labeled alternative in <see cref="TypeScriptParser.singleExpression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitIdentifierExpression([NotNull] TypeScriptParser.IdentifierExpressionContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>BitAndExpression</c>
	/// labeled alternative in <see cref="TypeScriptParser.singleExpression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterBitAndExpression([NotNull] TypeScriptParser.BitAndExpressionContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>BitAndExpression</c>
	/// labeled alternative in <see cref="TypeScriptParser.singleExpression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitBitAndExpression([NotNull] TypeScriptParser.BitAndExpressionContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>BitOrExpression</c>
	/// labeled alternative in <see cref="TypeScriptParser.singleExpression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterBitOrExpression([NotNull] TypeScriptParser.BitOrExpressionContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>BitOrExpression</c>
	/// labeled alternative in <see cref="TypeScriptParser.singleExpression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitBitOrExpression([NotNull] TypeScriptParser.BitOrExpressionContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>AssignmentOperatorExpression</c>
	/// labeled alternative in <see cref="TypeScriptParser.singleExpression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterAssignmentOperatorExpression([NotNull] TypeScriptParser.AssignmentOperatorExpressionContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>AssignmentOperatorExpression</c>
	/// labeled alternative in <see cref="TypeScriptParser.singleExpression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitAssignmentOperatorExpression([NotNull] TypeScriptParser.AssignmentOperatorExpressionContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>VoidExpression</c>
	/// labeled alternative in <see cref="TypeScriptParser.singleExpression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterVoidExpression([NotNull] TypeScriptParser.VoidExpressionContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>VoidExpression</c>
	/// labeled alternative in <see cref="TypeScriptParser.singleExpression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitVoidExpression([NotNull] TypeScriptParser.VoidExpressionContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="TypeScriptParser.asExpression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterAsExpression([NotNull] TypeScriptParser.AsExpressionContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="TypeScriptParser.asExpression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitAsExpression([NotNull] TypeScriptParser.AsExpressionContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="TypeScriptParser.arrowFunctionDeclaration"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterArrowFunctionDeclaration([NotNull] TypeScriptParser.ArrowFunctionDeclarationContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="TypeScriptParser.arrowFunctionDeclaration"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitArrowFunctionDeclaration([NotNull] TypeScriptParser.ArrowFunctionDeclarationContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="TypeScriptParser.arrowFunctionParameters"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterArrowFunctionParameters([NotNull] TypeScriptParser.ArrowFunctionParametersContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="TypeScriptParser.arrowFunctionParameters"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitArrowFunctionParameters([NotNull] TypeScriptParser.ArrowFunctionParametersContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="TypeScriptParser.arrowFunctionBody"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterArrowFunctionBody([NotNull] TypeScriptParser.ArrowFunctionBodyContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="TypeScriptParser.arrowFunctionBody"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitArrowFunctionBody([NotNull] TypeScriptParser.ArrowFunctionBodyContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="TypeScriptParser.assignmentOperator"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterAssignmentOperator([NotNull] TypeScriptParser.AssignmentOperatorContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="TypeScriptParser.assignmentOperator"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitAssignmentOperator([NotNull] TypeScriptParser.AssignmentOperatorContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="TypeScriptParser.literal"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterLiteral([NotNull] TypeScriptParser.LiteralContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="TypeScriptParser.literal"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitLiteral([NotNull] TypeScriptParser.LiteralContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="TypeScriptParser.numericLiteral"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterNumericLiteral([NotNull] TypeScriptParser.NumericLiteralContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="TypeScriptParser.numericLiteral"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitNumericLiteral([NotNull] TypeScriptParser.NumericLiteralContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="TypeScriptParser.identifierName"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterIdentifierName([NotNull] TypeScriptParser.IdentifierNameContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="TypeScriptParser.identifierName"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitIdentifierName([NotNull] TypeScriptParser.IdentifierNameContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="TypeScriptParser.identifierOrKeyWord"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterIdentifierOrKeyWord([NotNull] TypeScriptParser.IdentifierOrKeyWordContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="TypeScriptParser.identifierOrKeyWord"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitIdentifierOrKeyWord([NotNull] TypeScriptParser.IdentifierOrKeyWordContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="TypeScriptParser.reservedWord"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterReservedWord([NotNull] TypeScriptParser.ReservedWordContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="TypeScriptParser.reservedWord"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitReservedWord([NotNull] TypeScriptParser.ReservedWordContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="TypeScriptParser.keyword"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterKeyword([NotNull] TypeScriptParser.KeywordContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="TypeScriptParser.keyword"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitKeyword([NotNull] TypeScriptParser.KeywordContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="TypeScriptParser.getter"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterGetter([NotNull] TypeScriptParser.GetterContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="TypeScriptParser.getter"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitGetter([NotNull] TypeScriptParser.GetterContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="TypeScriptParser.setter"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterSetter([NotNull] TypeScriptParser.SetterContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="TypeScriptParser.setter"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitSetter([NotNull] TypeScriptParser.SetterContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="TypeScriptParser.eos"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterEos([NotNull] TypeScriptParser.EosContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="TypeScriptParser.eos"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitEos([NotNull] TypeScriptParser.EosContext context);
}
